var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.969,1,1.293]],["body/components/AppComponent.html",[0,1.291,1,1.897,2,1.689,3,0.401,4,0.401,5,1.353,6,2.03,7,1.353,8,1.353,9,0.335,10,1.622,11,0.589,12,2.881,13,2.379,14,0.64,15,2.978,16,1.984,17,2.978,18,0.656,19,0.804,20,2.379,21,2.817,22,1.353,23,2.756,24,2.881,25,1.984,26,1.984,27,2.35,28,1.984,29,3.527,30,1.897,31,1.897,32,2.978,33,3.527,34,1.984,35,2.978,36,0.401,37,0.401,38,0.907,39,2.35,40,0.64,41,1.454,42,2.111,43,3.885,44,3.885,45,3.885,46,2.817,47,3.103,48,0.991,49,1.622,50,1.888,51,2.237,52,2.978,53,1.454,54,0.641,55,0.991,56,0.058,57,0.697,58,0.414,59,0.991,60,1.897,61,1.689,62,1.984,63,1.984,64,2.03,65,2.978,66,0.696,67,2.978,68,0.491,69,0.696,70,2.204,71,0.589,72,1.897,73,2.453,74,2.03,75,2.978,76,2.978,77,1.897,78,1.583,79,2.379,80,3.885,81,2.379,82,2.379,83,3.527,84,1.454,85,3.103,86,2.03,87,2.588,88,0.601,89,2.03,90,1.984,91,1.258,92,2.379,93,1.984,94,2.03,95,1.984,96,1.258,97,1.258,98,0.589,99,0.401,100,1.689,101,2.204,102,1.258,103,0.697,104,1.984,105,2.03,106,1.984,107,1.984,108,1.454,109,1.984,110,1.984,111,2.237,112,0.858,113,1.622,114,1.353,115,1.984,116,1.353,117,2.03,118,1.689,119,1.353,120,2.03,121,1.689,122,1.622,123,1.353,124,1.353,125,0.991,126,2.03,127,0.401,128,0.991,129,0.991,130,1.353,131,1.353,132,2.03,133,2.379,134,2.03,135,2.03,136,1.622,137,2.03,138,2.379,139,2.03,140,2.03,141,3.527,142,2.03,143,2.978,144,1.984,145,1.689,146,2.03,147,2.03,148,2.03,149,2.03,150,2.03,151,1.622,152,2.03,153,2.03,154,2.03,155,2.03,156,2.03,157,1.353,158,2.535,159,0.491,160,2.03,161,2.978,162,0.643,163,1.152,164,2.03,165,2.03,166,2.03,167,2.03,168,2.03,169,1.353,170,2.03,171,2.379,172,2.03,173,2.03,174,2.03,175,2.03,176,2.03,177,2.03,178,4.137,179,2.03,180,4.468,181,2.03,182,2.03,183,2.03,184,2.03,185,2.03,186,3.885,187,4.468,188,2.978,189,2.03,190,1.984,191,2.03,192,2.03,193,2.03,194,2.03,195,2.03,196,2.03,197,2.03,198,2.03,199,2.03,200,2.03,201,2.03,202,2.03,203,2.03,204,2.03,205,2.03,206,2.03,207,2.03,208,2.978,209,2.03,210,2.03,211,2.03,212,2.978,213,2.03,214,2.03,215,2.03,216,2.03,217,3.527,218,2.03,219,3.885,220,2.03,221,2.03,222,2.03,223,1.622,224,2.03,225,3.885,226,2.379,227,2.03,228,1.622,229,2.03,230,2.03,231,2.03,232,2.03,233,2.03,234,2.03,235,1.353,236,1.984,237,1.984,238,1.353,239,1.353,240,1.353,241,1.353,242,0.273,243,1.353,244,1.353,245,0.031,246,0.031]],["title/interfaces/Arc.html",[242,0.356,247,0.356]],["body/interfaces/Arc.html",[3,0.509,4,0.509,9,0.425,11,0.509,14,0.723,18,0.71,19,0.581,36,0.609,37,0.474,38,0.602,40,0.609,54,0.663,56,0.058,57,0.697,58,0.538,66,1.01,68,0.789,69,0.823,71,0.697,88,0.474,98,0.509,99,0.347,103,1.019,127,0.924,159,0.663,162,1.117,242,0.609,245,0.037,246,0.037,247,0.69,248,0.943,249,0.943,250,1.712,251,1.712,252,1.975,253,1.826,254,1.168,255,1.481,256,1.291,257,1.378,258,1.273,259,1.582,260,1.097,261,1.472,262,1.291,263,1.291,264,1.291,265,1.291,266,1.489,267,0.644,268,0.816,269,1.088,270,0.943,271,0.816,272,1.369,273,1.007,274,1.117,275,1.291,276,1.489,277,0.816,278,1.088,279,1.088,280,1.088,281,1.291,282,1.088,283,0.816,284,0.816,285,1.273,286,1.088,287,1.088,288,0.816,289,0.602,290,0.943,291,0.816,292,1.088,293,0.816,294,0.816,295,0.943,296,1.088,297,1.088,298,0.816,299,0.816,300,1.291]],["title/injectables/ArcService.html",[301,1.293,302,1.293]],["body/injectables/ArcService.html",[3,0.511,4,0.511,9,0.426,11,0.796,14,0.717,18,0.724,19,0.583,25,1.721,36,0.348,37,0.476,41,1.725,42,2.285,48,1.966,51,2.381,53,1.725,54,0.583,55,1.725,56,0.058,57,0.699,58,0.482,59,1.725,60,2.113,68,0.583,69,0.825,72,2.285,73,2.004,78,1.293,81,2.822,84,1.725,91,1.828,96,1.701,97,1.701,98,1.007,99,0.674,103,0.99,111,1.725,112,1.091,125,1.261,127,0.511,128,1.261,129,1.725,242,0.645,245,0.037,246,0.037,254,1.119,260,1.366,267,0.656,288,1.119,289,1.19,301,1.725,302,1.725,303,1.721,304,2.064,305,3.533,306,3.216,307,3.216,308,3.533,309,4.328,310,4.328,311,3.533,312,3.533,313,3.533,314,2.583,315,3.457,316,2.583,317,3.533,318,2.583,319,3.457,320,4.026,321,3.457,322,2.583,323,2.583,324,3.533,325,2.822,326,3.533,327,3.533,328,3.216,329,2.583,330,2.583,331,4.328,332,2.004,333,2.822,334,3.533,335,2.822,336,3.533,337,3.533,338,2.064,339,2.583,340,2.822,341,3.533,342,2.822,343,2.583,344,2.583,345,2.583]],["title/interfaces/City.html",[159,0.437,247,0.356]],["body/interfaces/City.html",[3,0.526,4,0.526,9,0.439,11,0.526,14,0.72,18,0.709,19,0.439,36,0.485,37,0.485,38,0.621,40,0.616,54,0.674,56,0.058,57,0.905,58,0.53,66,0.955,68,0.796,69,0.842,71,0.526,88,0.358,98,0.526,99,0.358,103,1.024,127,0.934,159,0.723,162,1.142,242,0.55,245,0.038,246,0.038,247,0.693,248,0.974,249,0.974,250,1.32,251,1.32,252,1.523,253,1.124,254,1.147,255,1.451,256,0.974,257,1.359,258,1.142,259,1.32,260,0.984,261,0.974,262,0.974,263,0.974,264,0.974,265,0.974,266,1.124,267,0.684,268,0.843,269,1.124,270,0.974,271,0.843,272,1.388,273,1.012,274,1.142,275,1.32,276,1.523,277,0.843,278,1.124,279,1.124,280,1.124,281,1.32,282,1.124,283,0.843,284,0.843,285,1.451,286,1.124,287,1.124,288,0.843,289,0.621,290,1.32,291,1.388,292,1.523,293,1.142,294,1.142,295,1.32,296,1.523,297,1.727,298,0.843,299,0.843,300,1.32]],["title/interfaces/Cohorte.html",[247,0.356,267,0.356]],["body/interfaces/Cohorte.html",[3,0.523,4,0.523,9,0.436,11,0.523,14,0.724,18,0.708,19,0.436,36,0.483,37,0.483,38,0.618,40,0.615,54,0.672,56,0.058,57,0.71,58,0.54,66,0.952,68,0.795,69,0.839,71,0.523,88,0.356,98,0.523,99,0.356,103,1.003,127,0.932,159,0.777,162,1.138,242,0.549,245,0.038,246,0.038,247,0.693,248,0.969,249,0.969,250,1.315,251,1.315,252,1.517,253,1.118,254,1.146,255,1.385,256,0.969,257,1.357,258,1.138,259,1.315,260,1.113,261,0.969,262,0.969,263,0.969,264,0.969,265,0.969,266,1.118,267,0.688,268,1.138,269,1.517,270,1.601,271,1.291,272,1.554,273,1.018,274,1.138,275,1.315,276,1.517,277,0.838,278,1.118,279,1.118,280,1.118,281,1.315,282,1.118,283,0.838,284,0.838,285,1.385,286,1.118,287,1.118,288,0.838,289,0.618,290,0.969,291,0.838,292,1.118,293,0.838,294,0.838,295,0.969,296,1.118,297,1.118,298,0.838,299,0.838,300,1.315]],["title/components/FormCohorteComponent.html",[0,0.969,30,1.293]],["body/components/FormCohorteComponent.html",[0,1.148,1,0.815,2,1.459,3,0.33,4,0.33,5,1.113,7,1.113,8,1.113,9,0.275,11,0.696,12,2.346,13,2.054,14,0.679,16,1.713,18,0.685,19,0.712,22,1.113,23,2.534,24,2.534,26,1.713,27,1.713,28,1.713,30,1.961,31,0.815,34,1.713,36,0.225,37,0.346,38,0.888,39,2.089,40,0.609,41,1.255,42,1.719,48,0.815,49,1.334,50,1.768,51,2.311,53,1.255,54,0.712,55,1.531,56,0.058,57,0.854,58,0.549,59,1.531,60,1.961,61,1.998,62,1.713,63,1.713,70,1.998,71,0.696,72,1.857,73,2.157,77,1.255,78,1.809,84,1.719,88,0.512,91,1.825,93,2.346,95,2.346,96,1.606,97,1.606,98,0.508,99,0.346,100,1.459,101,1.459,102,1.086,103,0.696,104,1.713,106,1.713,107,1.713,108,1.719,109,1.713,110,1.713,111,2.248,112,0.705,114,1.113,115,2.788,116,3.188,118,0.947,121,0.947,122,1.334,123,1.113,124,1.113,125,0.815,127,0.33,128,0.815,129,1.857,130,1.113,131,1.113,133,1.334,145,1.459,157,2.534,158,2.157,159,0.517,163,2.451,171,2.054,235,1.113,236,1.713,237,1.713,238,1.113,239,1.113,240,1.113,241,1.113,242,0.541,243,1.113,244,1.113,245,0.027,246,0.027,257,0.856,260,0.702,261,0.611,267,0.685,270,0.941,271,1.205,272,0.815,273,0.998,277,0.993,281,1.148,289,1.128,302,1.961,321,2.813,325,2.054,346,3.822,347,1.334,348,3.451,349,4.32,350,2.571,351,2.504,352,2.504,353,2.504,354,2.504,355,2.571,356,2.054,357,2.571,358,3.135,359,2.571,360,2.571,361,3.521,362,3.521,363,3.521,364,2.571,365,2.571,366,2.054,367,1.67,368,1.67,369,2.571,370,3.521,371,1.67,372,2.571,373,3.113,374,4.673,375,2.571,376,3.521,377,1.67,378,1.67,379,2.571,380,2.054,381,2.054,382,2.571,383,1.713,384,2.571,385,1.67,386,2.571,387,2.054,388,1.67,389,1.998,390,3.521,391,1.67,392,1.67,393,2.676,394,2.676,395,1.67,396,1.67,397,3.521,398,1.67,399,3.135,400,1.113,401,1.334,402,1.334,403,1.334,404,1.334,405,1.113,406,1.67,407,1.334,408,1.334,409,1.113,410,1.334,411,1.334,412,1.67,413,1.67,414,1.67,415,1.67,416,1.67,417,2.571,418,2.571,419,1.67,420,1.67,421,1.67,422,1.334,423,1.67,424,1.67,425,1.67,426,1.67,427,1.67,428,1.67,429,1.67,430,1.67,431,1.67,432,1.67,433,1.67,434,1.67,435,1.67,436,1.67,437,1.67,438,1.67,439,1.67,440,1.67,441,1.67,442,2.571,443,3.208,444,2.571,445,2.571,446,2.571,447,2.571,448,2.054,449,2.571,450,2.571]],["title/interfaces/Solution.html",[40,0.356,247,0.356]],["body/interfaces/Solution.html",[3,0.518,4,0.518,9,0.432,11,0.518,14,0.724,18,0.71,19,0.432,36,0.48,37,0.48,38,0.947,40,0.675,54,0.669,56,0.058,57,0.705,58,0.539,66,0.947,68,0.807,69,1.017,71,0.518,88,0.352,98,0.518,99,0.48,103,1.001,127,0.929,159,0.751,162,1.488,242,0.546,245,0.037,246,0.037,247,0.692,248,0.959,249,0.959,250,1.305,251,1.305,252,1.506,253,1.106,254,1.143,255,1.379,256,0.959,257,1.312,258,1.13,259,1.305,260,0.973,261,0.959,262,0.959,263,0.959,264,0.959,265,0.959,266,1.106,267,0.668,268,0.83,269,1.106,270,0.959,271,0.83,272,1.55,273,1.022,274,1.284,275,1.305,276,1.506,277,0.83,278,1.106,279,1.106,280,1.106,281,1.305,282,1.106,283,0.83,284,0.83,285,1.284,286,1.106,287,1.106,288,0.83,289,0.612,290,0.959,291,0.83,292,1.106,293,0.83,294,0.83,295,0.959,296,1.106,297,1.106,298,1.13,299,1.379,300,1.72]],["title/injectables/SolutionService.html",[50,1.118,301,1.293]],["body/injectables/SolutionService.html",[3,0.273,4,0.273,9,0.227,11,0.626,14,0.675,16,1.473,18,0.719,19,0.765,25,0.918,36,0.186,37,0.298,38,1.021,39,1.473,40,0.69,41,1.08,42,2.534,46,3.332,48,0.673,50,0.934,51,2.332,53,1.08,54,0.721,55,1.352,56,0.058,57,0.769,58,0.444,59,1.352,60,1.547,61,1.254,66,0.516,68,0.365,69,1.057,70,0.782,71,0.626,72,2.366,77,1.08,78,1.774,85,3.23,87,2.467,88,0.426,91,2.018,93,1.845,95,1.845,96,1.338,97,1.338,98,0.865,99,0.68,100,2.661,102,2.001,103,0.928,108,1.899,111,1.693,112,0.582,113,1.101,124,0.918,125,0.673,127,0.273,128,0.673,129,1.352,136,2.531,138,1.101,145,2.366,157,0.918,158,2.526,159,0.721,162,0.437,163,1.797,169,0.918,190,0.918,228,1.766,242,0.186,245,0.023,246,0.023,254,0.81,255,0.437,257,0.756,258,0.437,262,1.355,267,0.298,268,0.437,271,0.437,272,1.281,273,0.547,274,1.321,275,1.567,277,0.7,283,0.877,284,0.7,285,0.437,289,0.322,291,1.099,293,0.437,298,1.356,299,1.232,300,0.505,301,1.08,303,0.918,315,3.493,332,1.254,338,1.101,340,3.23,380,2.531,381,1.766,383,1.473,387,1.766,389,2.526,394,2.111,405,1.473,411,1.766,451,1.101,452,2.211,453,2.211,454,2.77,455,2.211,456,2.211,457,2.211,458,2.211,459,2.211,460,3.168,461,3.168,462,3.168,463,3.168,464,3.168,465,3.168,466,3.168,467,2.769,468,3.168,469,1.378,470,2.769,471,2.211,472,3.168,473,2.211,474,2.211,475,2.211,476,3.613,477,2.211,478,2.211,479,2.211,480,2.211,481,1.378,482,2.211,483,3.168,484,1.378,485,1.378,486,1.766,487,2.211,488,2.769,489,2.211,490,1.378,491,1.378,492,1.378,493,1.378,494,1.378,495,1.378,496,1.378,497,1.101,498,1.101,499,1.378,500,1.378,501,3.89,502,4.043,503,3.871,504,4.453,505,3.557,506,3.702,507,1.378,508,4.641,509,1.378,510,1.378,511,1.378,512,2.211,513,2.211,514,1.378,515,2.211,516,1.378,517,1.378,518,1.378,519,1.378,520,1.378,521,2.211,522,1.378,523,2.211,524,1.378,525,2.957,526,2.211,527,1.378,528,2.211,529,2.211,530,1.378,531,2.211,532,1.378,533,2.211,534,1.101,535,1.378,536,2.211,537,2.211,538,2.211,539,1.766,540,1.766,541,2.211,542,1.378,543,1.378,544,1.378,545,1.378,546,1.378,547,1.378,548,2.211,549,1.378,550,1.378,551,1.378,552,1.378,553,2.211,554,1.378,555,2.211,556,1.378,557,1.101,558,1.378,559,1.378,560,1.378,561,1.378,562,1.378,563,1.378,564,1.378,565,1.378,566,1.378,567,1.378,568,1.378,569,1.378,570,1.378,571,1.378,572,1.378,573,2.211,574,1.378,575,1.378,576,1.378,577,1.378,578,1.378,579,1.378,580,1.378,581,1.378,582,1.378,583,1.378,584,1.378,585,1.378,586,1.378,587,1.378,588,1.378,589,1.101,590,1.378,591,1.378,592,2.211,593,2.211,594,1.378,595,1.378,596,1.378,597,1.378,598,1.378,599,1.378,600,1.378,601,1.378,602,1.378,603,1.378,604,1.378,605,2.769,606,2.211,607,1.378]],["title/components/TableArcComponent.html",[0,0.969,31,1.293]],["body/components/TableArcComponent.html",[0,0.983,1,0.643,2,1.209,3,0.26,4,0.26,5,0.878,7,0.878,8,0.878,9,0.217,11,0.717,12,2.258,14,0.637,18,0.655,19,0.352,20,1.703,21,2.145,22,0.878,23,2.258,24,2.258,26,1.42,27,1.42,28,1.42,30,0.643,31,1.771,34,1.42,36,0.361,37,0.287,38,0.308,40,0.568,41,1.041,42,0.643,47,2.145,48,0.643,50,1.679,51,2.33,53,1.041,54,0.737,55,1.655,56,0.058,57,0.755,58,0.494,59,1.655,60,1.771,61,1.751,62,1.42,63,2.416,66,0.627,68,0.677,69,0.721,71,0.61,72,1.771,73,2.057,77,1.041,78,1.733,79,1.703,82,1.703,84,0.643,87,0.878,88,0.177,90,0.878,91,1.941,92,2.145,96,1.782,97,1.782,98,0.422,99,0.611,101,2.33,102,1.532,103,0.67,104,1.42,106,1.42,107,1.42,108,1.041,109,1.42,110,1.42,111,2.183,112,0.556,114,0.878,115,0.878,118,2.255,119,3.203,125,0.643,127,0.26,128,0.643,129,1.655,130,0.878,131,0.878,144,0.878,145,1.209,158,2.606,159,0.781,163,2.166,169,1.42,223,2.465,226,1.703,235,0.878,236,1.42,237,1.42,238,0.878,239,0.878,240,0.878,241,0.878,242,0.647,243,0.878,244,0.878,245,0.022,246,0.022,250,0.78,251,0.78,254,0.985,255,0.675,256,0.983,257,1.085,258,0.675,259,1.13,260,0.842,263,0.78,264,0.78,267,0.456,268,0.675,273,0.786,274,1.523,283,0.851,284,0.417,285,0.978,288,1.437,289,1.027,290,0.78,291,0.675,293,0.675,294,0.675,298,1.21,299,1.21,302,1.655,306,1.703,307,2.707,319,2.465,328,2.465,332,1.209,335,1.703,342,1.052,348,1.703,351,2.145,352,2.145,353,2.145,354,2.145,356,1.703,366,1.703,373,2.649,383,0.878,389,2.255,393,2.056,394,2.811,400,0.878,401,1.052,402,1.052,403,1.052,404,1.052,405,1.789,408,1.052,410,1.052,443,2.465,448,1.703,454,1.052,476,1.703,486,2.465,497,2.145,539,1.052,557,1.703,589,1.052,608,3.84,609,1.052,610,2.685,611,3.389,612,2.685,613,2.685,614,2.132,615,2.132,616,2.685,617,2.685,618,2.685,619,2.685,620,2.685,621,3.389,622,2.685,623,2.685,624,2.685,625,2.685,626,2.132,627,3.086,628,2.132,629,2.132,630,2.132,631,1.317,632,2.132,633,2.132,634,1.317,635,1.703,636,2.132,637,2.465,638,1.317,639,2.132,640,2.132,641,2.685,642,2.132,643,2.132,644,2.132,645,2.132,646,2.685,647,2.132,648,1.317,649,1.317,650,1.317,651,2.132,652,2.132,653,3.389,654,1.317,655,3.389,656,1.317,657,3.389,658,2.132,659,2.132,660,1.317,661,2.132,662,3.086,663,3.389,664,2.132,665,2.132,666,1.317,667,2.132,668,1.317,669,1.317,670,2.132,671,2.685,672,1.317,673,2.132,674,3.086,675,1.317,676,2.132,677,2.132,678,1.317,679,1.317,680,3.086,681,2.132,682,1.317,683,1.317,684,2.132,685,1.317,686,2.132,687,1.317,688,2.132,689,1.317,690,1.317,691,2.132,692,2.132,693,2.132,694,1.317,695,2.132,696,1.317,697,1.317,698,1.317,699,1.317,700,1.052,701,2.132,702,2.132,703,1.317,704,1.317,705,1.317,706,1.317,707,1.317,708,1.317,709,1.317,710,1.317,711,1.317,712,1.317,713,2.132,714,1.317,715,1.317,716,1.317,717,1.317,718,2.132,719,1.317,720,1.317,721,1.052,722,1.317,723,1.317,724,2.132,725,1.317,726,1.317,727,2.685,728,2.132,729,1.317,730,1.317,731,2.132,732,1.317,733,2.132,734,2.132,735,1.317,736,1.317,737,1.317,738,1.317,739,1.317,740,1.317,741,1.317,742,1.317,743,2.132,744,2.685,745,1.317,746,2.132,747,1.317,748,1.317,749,1.317,750,1.317,751,1.317,752,1.317,753,1.317,754,1.317,755,2.132,756,1.317,757,1.317,758,1.317,759,2.132,760,2.132,761,2.132,762,2.132,763,2.132,764,1.317,765,1.317,766,1.317,767,1.317,768,1.317,769,1.317,770,1.317,771,1.317,772,1.317,773,1.317,774,1.317,775,1.317,776,1.052,777,1.317,778,1.317,779,1.317,780,1.317,781,1.317,782,2.132,783,1.317,784,1.317,785,1.317,786,2.132,787,2.132,788,2.132,789,2.132,790,2.132,791,2.132]],["title/interfaces/Tube.html",[247,0.356,273,0.524]],["body/interfaces/Tube.html",[3,0.526,4,0.526,9,0.438,11,0.526,14,0.717,18,0.7,19,0.438,36,0.485,37,0.485,38,0.621,40,0.616,54,0.755,56,0.058,57,0.712,58,0.53,66,1.023,68,0.796,69,0.841,71,0.526,88,0.358,98,0.712,99,0.358,103,0.995,127,0.933,159,0.674,162,1.141,242,0.616,245,0.038,246,0.038,247,0.693,248,0.973,249,0.973,250,1.319,251,1.319,252,1.522,253,1.123,254,1.102,255,1.387,256,0.973,257,1.414,258,1.294,259,1.319,260,0.983,261,0.973,262,0.973,263,0.973,264,0.973,265,0.973,266,1.123,267,0.65,268,0.842,269,1.123,270,0.973,271,0.842,272,1.387,273,1.037,274,1.141,275,1.496,276,1.726,277,0.842,278,1.522,279,1.522,280,1.522,281,1.728,282,1.522,283,0.842,284,0.842,285,1.294,286,1.123,287,1.123,288,1.141,289,1.023,290,0.973,291,0.842,292,1.123,293,0.842,294,0.842,295,0.973,296,1.123,297,1.123,298,0.842,299,0.842,300,1.319]],["title/interfaces/Type.html",[58,0.282,247,0.356]],["body/interfaces/Type.html",[3,0.532,4,0.532,9,0.444,11,0.532,14,0.722,18,0.702,19,0.444,36,0.489,37,0.489,38,0.629,40,0.619,54,0.726,56,0.058,57,0.909,58,0.546,66,1.028,68,0.799,69,0.849,71,0.532,88,0.362,98,0.532,99,0.362,103,0.997,127,0.937,159,0.678,162,1.151,242,0.554,245,0.038,246,0.038,247,0.694,248,0.986,249,0.986,250,1.33,251,1.33,252,1.535,253,1.137,254,1.15,255,1.456,256,0.986,257,1.322,258,1.151,259,1.33,260,0.992,261,0.986,262,0.986,263,0.986,264,0.986,265,0.986,266,1.137,267,0.652,268,0.853,269,1.137,270,0.986,271,0.853,272,1.395,273,1.039,274,1.303,275,1.506,276,1.737,277,1.395,278,1.137,279,1.137,280,1.137,281,1.33,282,1.137,283,0.853,284,0.853,285,1.303,286,1.137,287,1.137,288,0.853,289,0.629,290,0.986,291,0.853,292,1.137,293,0.853,294,0.853,295,0.986,296,1.137,297,1.137,298,0.853,299,0.853,300,1.33]],["title/coverage.html",[792,2.869]],["body/coverage.html",[0,1.719,1,1.739,9,0.587,10,2.844,30,1.739,31,1.739,40,0.479,50,1.504,56,0.057,58,0.463,116,2.372,118,2.02,119,2.372,121,2.02,159,0.587,190,3.594,242,0.479,245,0.046,246,0.046,247,0.687,249,1.868,267,0.479,273,0.704,301,2.123,302,1.739,304,2.844,332,2.02,346,2.844,347,2.844,393,3.342,409,2.372,451,2.844,608,2.844,609,2.844,792,2.844,793,2.844,794,3.561,795,3.561,796,4.349,797,3.561,798,3.561,799,4.696,800,3.561,801,3.561,802,4.006,803,4.006,804,5.015,805,2.844,806,2.844,807,2.844,808,3.561,809,3.561,810,3.561]],["title/dependencies.html",[811,1.774,812,2.539]],["body/dependencies.html",[56,0.057,88,0.65,112,1.608,123,2.535,245,0.048,246,0.048,400,2.535,407,3.04,534,3.04,700,3.04,812,3.04,813,3.805,814,5.336,815,3.805,816,3.805,817,3.805,818,4.527,819,4.527,820,3.805,821,3.805,822,3.805,823,3.805,824,3.04,825,3.805,826,4.832,827,3.805,828,3.805,829,3.805,830,3.805,831,3.805,832,3.805,833,3.805,834,3.805,835,3.805,836,3.805,837,3.805,838,3.805]],["title/index.html",[36,0.299,839,2.221,840,2.221]],["body/index.html",[14,0.693,18,0.707,19,0.522,40,0.426,54,0.734,56,0.053,66,1.095,68,0.817,71,0.626,77,1.544,78,1.885,84,2.419,88,0.426,90,2.108,91,1.706,99,0.544,102,1.336,108,1.544,245,0.042,246,0.042,265,1.158,294,1.28,295,1.158,333,2.527,373,2.691,389,1.794,498,2.527,503,2.527,505,2.527,540,2.527,635,3.226,637,2.527,721,2.527,776,2.527,793,3.226,824,3.226,841,4.45,842,3.163,843,3.163,844,3.163,845,3.163,846,3.163,847,3.163,848,3.163,849,3.163,850,3.163,851,3.163,852,3.163,853,3.163,854,4.953,855,3.163,856,3.163,857,3.163,858,3.163,859,3.163,860,3.163,861,3.163,862,3.163,863,3.163,864,3.163,865,3.163,866,3.163,867,3.163,868,3.163,869,3.163,870,3.163,871,3.163,872,3.163,873,3.163,874,3.163,875,3.163,876,3.163,877,3.163,878,3.163,879,3.163,880,3.163,881,3.163,882,3.163,883,3.163,884,3.163,885,3.163,886,3.163,887,3.163,888,3.163,889,3.163,890,4.039,891,3.163,892,3.163,893,3.163,894,4.45,895,4.688,896,3.163,897,3.163,898,3.163,899,4.45,900,3.163,901,4.45,902,3.163,903,4.039,904,3.163,905,4.039,906,3.163,907,4.039,908,3.163,909,4.039,910,3.163,911,3.163,912,3.163,913,3.163,914,3.163,915,3.163,916,3.163,917,4.688,918,3.163,919,3.163,920,3.163,921,3.163,922,4.45,923,4.039,924,3.163,925,3.163,926,3.163,927,3.163,928,3.163]],["title/modules.html",[929,2.869]],["body/modules.html",[56,0.051,245,0.051,246,0.051,929,3.391]],["title/overview.html",[930,2.869]],["body/overview.html",[2,2.384,56,0.05,144,2.8,151,3.357,245,0.05,246,0.05,248,1.539,303,2.8,930,3.357,931,4.203]],["title/properties.html",[37,0.428,811,1.774]],["body/properties.html",[37,0.569,56,0.053,245,0.051,246,0.051,932,4.224,933,4.224]],["title/miscellaneous/variables.html",[934,1.774,935,2.539]],["body/miscellaneous/variables.html",[14,0.673,18,0.473,36,0.473,56,0.056,58,0.497,68,0.58,70,1.994,78,1.287,88,0.473,96,2.111,97,2.111,99,0.473,100,1.994,101,2.448,102,1.823,121,2.448,245,0.045,246,0.045,254,1.091,267,0.473,409,2.875,422,2.808,525,3.73,802,2.808,803,4.063,805,3.889,806,3.73,807,3.889,934,2.808,935,2.808,936,4.997,937,4.315,938,4.315,939,4.315,940,5.203,941,4.315,942,4.315,943,4.315,944,4.315,945,4.315,946,4.315,947,4.315,948,4.315,949,4.315,950,4.315,951,4.669,952,3.515,953,4.669,954,3.515,955,3.515,956,3.515,957,3.515]]],"invertedIndex":[["",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":163,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["0.0.0",{"_index":933,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["0.6",{"_index":227,"title":{},"body":{"components/AppComponent.html":{}}}],["0.7",{"_index":704,"title":{},"body":{"components/TableArcComponent.html":{}}}],["0.8",{"_index":232,"title":{},"body":{"components/AppComponent.html":{}}}],["1",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"miscellaneous/variables.html":{}}}],["1.11.3",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["1.9.4",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":681,"title":{},"body":{"components/TableArcComponent.html":{}}}],["100",{"_index":190,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{},"coverage.html":{}}}],["100px",{"_index":214,"title":{},"body":{"components/AppComponent.html":{}}}],["10px",{"_index":212,"title":{},"body":{"components/AppComponent.html":{}}}],["12",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14/14",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":199,"title":{},"body":{"components/AppComponent.html":{}}}],["16",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0.0",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["17.0.0",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["17.3.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":149,"title":{},"body":{"components/AppComponent.html":{}}}],["19/19",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["1px",{"_index":225,"title":{},"body":{"components/AppComponent.html":{}}}],["2",{"_index":931,"title":{},"body":{"overview.html":{}}}],["2.071",{"_index":143,"title":{},"body":{"components/AppComponent.html":{}}}],["2.11.8",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["20/20",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":577,"title":{},"body":{"injectables/SolutionService.html":{}}}],["25",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":151,"title":{},"body":{"components/AppComponent.html":{},"overview.html":{}}}],["3/3",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":196,"title":{},"body":{"components/AppComponent.html":{}}}],["34",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4/4",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["41",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["47.338",{"_index":142,"title":{},"body":{"components/AppComponent.html":{}}}],["5",{"_index":703,"title":{},"body":{"components/TableArcComponent.html":{}}}],["5.3.2",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["50px",{"_index":215,"title":{},"body":{"components/AppComponent.html":{}}}],["5px",{"_index":221,"title":{},"body":{"components/AppComponent.html":{}}}],["6",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{},"overview.html":{}}}],["6/6",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["650px",{"_index":179,"title":{},"body":{"components/AppComponent.html":{}}}],["7.8.0",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["700px",{"_index":183,"title":{},"body":{"components/AppComponent.html":{}}}],["80px",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["85",{"_index":201,"title":{},"body":{"components/AppComponent.html":{}}}],["9/9",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["__propkey",{"_index":406,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["absolute",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["actual_component",{"_index":244,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["adapter",{"_index":588,"title":{},"body":{"injectables/SolutionService.html":{}}}],["affiche",{"_index":650,"title":{},"body":{"components/TableArcComponent.html":{}}}],["afficher",{"_index":658,"title":{},"body":{"components/TableArcComponent.html":{}}}],["ainsi",{"_index":878,"title":{},"body":{"index.html":{}}}],["ajout",{"_index":567,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ajoute",{"_index":482,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ajouter",{"_index":483,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ajoutés",{"_index":384,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["align",{"_index":208,"title":{},"body":{"components/AppComponent.html":{}}}],["already",{"_index":761,"title":{},"body":{"components/TableArcComponent.html":{}}}],["alt",{"_index":565,"title":{},"body":{"injectables/SolutionService.html":{}}}],["amont",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["amyotrophique",{"_index":849,"title":{},"body":{"index.html":{}}}],["angular",{"_index":877,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":700,"title":{},"body":{"components/TableArcComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["angular/compiler",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":400,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":697,"title":{},"body":{"components/TableArcComponent.html":{}}}],["angular/material/form",{"_index":403,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["angular/material/input",{"_index":401,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["angular/material/paginator",{"_index":699,"title":{},"body":{"components/TableArcComponent.html":{}}}],["angular/material/select",{"_index":402,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["angular/material/table",{"_index":698,"title":{},"body":{"components/TableArcComponent.html":{}}}],["angular/platform",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":176,"title":{},"body":{"components/AppComponent.html":{}}}],["app",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["app.component.css",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":35,"title":{},"body":{"components/AppComponent.html":{}}}],["apparaître",{"_index":737,"title":{},"body":{"components/TableArcComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["appelée",{"_index":76,"title":{},"body":{"components/AppComponent.html":{}}}],["après",{"_index":776,"title":{},"body":{"components/TableArcComponent.html":{},"index.html":{}}}],["arc",{"_index":242,"title":{"interfaces/Arc.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["arc.component",{"_index":120,"title":{},"body":{"components/AppComponent.html":{}}}],["arc.component.html",{"_index":614,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.scss",{"_index":615,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts",{"_index":609,"title":{},"body":{"components/TableArcComponent.html":{},"coverage.html":{}}}],["arc.component.ts:109",{"_index":660,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:120",{"_index":634,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:133",{"_index":638,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:169",{"_index":649,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:177",{"_index":668,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:29",{"_index":675,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:34",{"_index":672,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:39",{"_index":678,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:44",{"_index":687,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:49",{"_index":669,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:54",{"_index":690,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:59",{"_index":689,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:64",{"_index":685,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:69",{"_index":694,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:74",{"_index":682,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:79",{"_index":679,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:84",{"_index":632,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.component.ts:98",{"_index":666,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.index",{"_index":786,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arc.polyline.addto(map",{"_index":441,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["arc.polyline.bindtooltip(`quantit",{"_index":439,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["arc.quantity",{"_index":440,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["arc.service",{"_index":408,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["arc/table",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["arcchange",{"_index":626,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arcchange(index",{"_index":633,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arcs",{"_index":289,"title":{},"body":{"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["arcservice",{"_index":302,"title":{"injectables/ArcService.html":{}},"body":{"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["arcservice:arcservice",{"_index":410,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["around",{"_index":559,"title":{},"body":{"injectables/SolutionService.html":{}}}],["arrays",{"_index":769,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arrivée",{"_index":787,"title":{},"body":{"components/TableArcComponent.html":{}}}],["arrowheads",{"_index":534,"title":{},"body":{"injectables/SolutionService.html":{},"dependencies.html":{}}}],["assets/images/marker",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/map_data/map.geojson",{"_index":529,"title":{},"body":{"injectables/SolutionService.html":{}}}],["assets/solution_data/instance.txt",{"_index":526,"title":{},"body":{"injectables/SolutionService.html":{}}}],["assets/solution_data/solution_instance.txt",{"_index":523,"title":{},"body":{"injectables/SolutionService.html":{}}}],["assignable",{"_index":560,"title":{},"body":{"injectables/SolutionService.html":{}}}],["associée",{"_index":486,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["associés",{"_index":275,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["asymmetrik/ngx",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["attribution",{"_index":152,"title":{},"body":{"components/AppComponent.html":{}}}],["attribuées",{"_index":670,"title":{},"body":{"components/TableArcComponent.html":{}}}],["au",{"_index":276,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["aucune",{"_index":496,"title":{},"body":{"injectables/SolutionService.html":{}}}],["aussi",{"_index":774,"title":{},"body":{"components/TableArcComponent.html":{}}}],["automatiquement",{"_index":911,"title":{},"body":{"index.html":{}}}],["autopan",{"_index":168,"title":{},"body":{"components/AppComponent.html":{}}}],["autre",{"_index":647,"title":{},"body":{"components/TableArcComponent.html":{}}}],["aux",{"_index":513,"title":{},"body":{"injectables/SolutionService.html":{}}}],["avec",{"_index":635,"title":{},"body":{"components/TableArcComponent.html":{},"index.html":{}}}],["avoir",{"_index":883,"title":{},"body":{"index.html":{}}}],["background",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["bibliothèque",{"_index":879,"title":{},"body":{"index.html":{}}}],["bien",{"_index":644,"title":{},"body":{"components/TableArcComponent.html":{}}}],["black",{"_index":230,"title":{},"body":{"components/AppComponent.html":{}}}],["boolean",{"_index":297,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["booléen",{"_index":691,"title":{},"body":{"components/TableArcComponent.html":{}}}],["bootstrap",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["bootstrap/ng",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["border",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["bouton",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["browser",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["c'est",{"_index":752,"title":{},"body":{"components/TableArcComponent.html":{}}}],["cadre",{"_index":846,"title":{},"body":{"index.html":{}}}],["calc(100",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["cart",{"_index":568,"title":{},"body":{"injectables/SolutionService.html":{}}}],["carte",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["ce",{"_index":853,"title":{},"body":{"index.html":{}}}],["celle",{"_index":336,"title":{},"body":{"injectables/ArcService.html":{}}}],["cells",{"_index":770,"title":{},"body":{"components/TableArcComponent.html":{}}}],["center",{"_index":141,"title":{},"body":{"components/AppComponent.html":{}}}],["ces",{"_index":869,"title":{},"body":{"index.html":{}}}],["change",{"_index":423,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["chantillon",{"_index":278,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["chaque",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["charcot",{"_index":852,"title":{},"body":{"index.html":{}}}],["chaîne",{"_index":494,"title":{},"body":{"injectables/SolutionService.html":{}}}],["checksolution",{"_index":627,"title":{},"body":{"components/TableArcComponent.html":{}}}],["chercher",{"_index":490,"title":{},"body":{"injectables/SolutionService.html":{}}}],["choisi",{"_index":397,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["choisie",{"_index":376,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["choisir",{"_index":541,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ci",{"_index":337,"title":{},"body":{"injectables/ArcService.html":{}}}],["cities",{"_index":299,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["cities.features",{"_index":579,"title":{},"body":{"injectables/SolutionService.html":{}}}],["cities.push(citytoadd",{"_index":576,"title":{},"body":{"injectables/SolutionService.html":{}}}],["cities:city",{"_index":555,"title":{},"body":{"injectables/SolutionService.html":{}}}],["citiesposition",{"_index":454,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["citiesposition.get(newdestination)![0",{"_index":714,"title":{},"body":{"components/TableArcComponent.html":{}}}],["citiesposition.get(newdestination)![1",{"_index":715,"title":{},"body":{"components/TableArcComponent.html":{}}}],["citiesposition.get(neworigin)![0",{"_index":711,"title":{},"body":{"components/TableArcComponent.html":{}}}],["citiesposition.get(neworigin)![1",{"_index":712,"title":{},"body":{"components/TableArcComponent.html":{}}}],["citiesposition.set(name",{"_index":584,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city",{"_index":159,"title":{"interfaces/City.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["city.geometry.coordinates[0",{"_index":581,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city.geometry.coordinates[1",{"_index":583,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city.id",{"_index":574,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city.name",{"_index":566,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city.properties.name",{"_index":573,"title":{},"body":{"injectables/SolutionService.html":{}}}],["city:string",{"_index":413,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["citycohorte",{"_index":743,"title":{},"body":{"components/TableArcComponent.html":{}}}],["citytoadd",{"_index":575,"title":{},"body":{"injectables/SolutionService.html":{}}}],["class",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["client",{"_index":473,"title":{},"body":{"injectables/SolutionService.html":{}}}],["cod",{"_index":874,"title":{},"body":{"index.html":{}}}],["code",{"_index":913,"title":{},"body":{"index.html":{}}}],["cohorte",{"_index":267,"title":{"interfaces/Cohorte.html":{}},"body":{"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cohorte'},{'name",{"_index":241,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["cohorte.city",{"_index":444,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["cohorte.component.html",{"_index":355,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.scss",{"_index":357,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts",{"_index":347,"title":{},"body":{"components/FormCohorteComponent.html":{},"coverage.html":{}}}],["cohorte.component.ts:110",{"_index":391,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:122",{"_index":388,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:131",{"_index":385,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:144",{"_index":378,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:27",{"_index":367,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:32",{"_index":368,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:37",{"_index":395,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:42",{"_index":392,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:51",{"_index":398,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:59",{"_index":396,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:68",{"_index":365,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.component.ts:83",{"_index":371,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte.types",{"_index":445,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohorte/form",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"coverage.html":{}}}],["cohortechange",{"_index":359,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohortechange(e",{"_index":369,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohortecity",{"_index":306,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["cohortemarker",{"_index":358,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cohortenbpatientsline",{"_index":600,"title":{},"body":{"injectables/SolutionService.html":{}}}],["cohortes",{"_index":300,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["cohortevilleline",{"_index":598,"title":{},"body":{"injectables/SolutionService.html":{}}}],["colonnes",{"_index":677,"title":{},"body":{"components/TableArcComponent.html":{}}}],["color",{"_index":217,"title":{},"body":{"components/AppComponent.html":{}}}],["column",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["commande",{"_index":894,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":917,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":239,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"overview.html":{}}}],["composant",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["composants",{"_index":326,"title":{},"body":{"injectables/ArcService.html":{}}}],["console",{"_index":723,"title":{},"body":{"components/TableArcComponent.html":{}}}],["console.log(data",{"_index":344,"title":{},"body":{"injectables/ArcService.html":{}}}],["const",{"_index":145,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["constructeur",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["construction",{"_index":453,"title":{},"body":{"injectables/SolutionService.html":{}}}],["constructor",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["constructor(arcservice",{"_index":631,"title":{},"body":{"components/TableArcComponent.html":{}}}],["constructor(http",{"_index":469,"title":{},"body":{"injectables/SolutionService.html":{}}}],["constructor(private",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["constructor(protected",{"_index":546,"title":{},"body":{"injectables/SolutionService.html":{}}}],["constructor(solutionservice",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{}}}],["container",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["contenant",{"_index":394,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["content",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["contient",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["contrôler",{"_index":692,"title":{},"body":{"components/TableArcComponent.html":{}}}],["copy",{"_index":153,"title":{},"body":{"components/AppComponent.html":{}}}],["correspond",{"_index":498,"title":{},"body":{"injectables/SolutionService.html":{},"index.html":{}}}],["correspondant",{"_index":492,"title":{},"body":{"injectables/SolutionService.html":{}}}],["coverage",{"_index":792,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createmarkerspopup",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["crée",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["créer",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["créées",{"_index":537,"title":{},"body":{"injectables/SolutionService.html":{}}}],["créér",{"_index":366,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["créés",{"_index":387,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["current",{"_index":424,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["cursor",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["d'arc",{"_index":688,"title":{},"body":{"components/TableArcComponent.html":{}}}],["d'arcs",{"_index":288,"title":{},"body":{"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["d'arrivée",{"_index":256,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["d'entrée",{"_index":528,"title":{},"body":{"injectables/SolutionService.html":{}}}],["d'erreur",{"_index":652,"title":{},"body":{"components/TableArcComponent.html":{}}}],["d'ici",{"_index":892,"title":{},"body":{"index.html":{}}}],["d'un",{"_index":389,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["d'une",{"_index":372,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["d'échantillons",{"_index":866,"title":{},"body":{"index.html":{}}}],["dans",{"_index":373,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["data",{"_index":328,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["data.features",{"_index":572,"title":{},"body":{"injectables/SolutionService.html":{}}}],["data.polyline.setstyle",{"_index":701,"title":{},"body":{"components/TableArcComponent.html":{}}}],["data.split('\\n",{"_index":593,"title":{},"body":{"injectables/SolutionService.html":{}}}],["datasource",{"_index":616,"title":{},"body":{"components/TableArcComponent.html":{}}}],["de",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":683,"title":{},"body":{"components/TableArcComponent.html":{}}}],["default",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"miscellaneous/variables.html":{}}}],["defaultzoom",{"_index":44,"title":{},"body":{"components/AppComponent.html":{}}}],["defined",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["demande",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["demandeline",{"_index":602,"title":{},"body":{"injectables/SolutionService.html":{}}}],["demandent",{"_index":327,"title":{},"body":{"injectables/ArcService.html":{}}}],["dependencies",{"_index":812,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depuis",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["des",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["desservie",{"_index":645,"title":{},"body":{"components/TableArcComponent.html":{}}}],["dessin",{"_index":264,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["dessine",{"_index":379,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["destination",{"_index":250,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["deuxième",{"_index":855,"title":{},"body":{"index.html":{}}}],["différents",{"_index":533,"title":{},"body":{"injectables/SolutionService.html":{}}}],["direction",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["directive",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["directives",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["display",{"_index":186,"title":{},"body":{"components/AppComponent.html":{}}}],["displayedcolumns",{"_index":617,"title":{},"body":{"components/TableArcComponent.html":{}}}],["div",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["documentation",{"_index":793,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentationsous",{"_index":919,"title":{},"body":{"index.html":{}}}],["documention",{"_index":928,"title":{},"body":{"index.html":{}}}],["documentée",{"_index":914,"title":{},"body":{"index.html":{}}}],["doit",{"_index":736,"title":{},"body":{"components/TableArcComponent.html":{}}}],["doivent",{"_index":382,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["donn",{"_index":488,"title":{},"body":{"injectables/SolutionService.html":{}}}],["données",{"_index":476,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["dossier",{"_index":891,"title":{},"body":{"index.html":{}}}],["drawcities",{"_index":458,"title":{},"body":{"injectables/SolutionService.html":{}}}],["drawcities(map",{"_index":480,"title":{},"body":{"injectables/SolutionService.html":{}}}],["drawpolylines",{"_index":360,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["drawpolylines(map",{"_index":377,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["drawpolylines(map:l.map",{"_index":438,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["du",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["duration",{"_index":177,"title":{},"body":{"components/AppComponent.html":{}}}],["dynamic",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["décisions",{"_index":870,"title":{},"body":{"index.html":{}}}],["défaut",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["départ",{"_index":260,"title":{},"body":{"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["dépendances",{"_index":898,"title":{},"body":{"index.html":{}}}],["déplacements",{"_index":843,"title":{},"body":{"index.html":{}}}],["déplacez",{"_index":889,"title":{},"body":{"index.html":{}}}],["développement",{"_index":902,"title":{},"body":{"index.html":{}}}],["d’échantillons",{"_index":844,"title":{},"body":{"index.html":{}}}],["e",{"_index":171,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{}}}],["e.target.closepopup",{"_index":174,"title":{},"body":{"components/AppComponent.html":{}}}],["e.target.openpopup",{"_index":172,"title":{},"body":{"components/AppComponent.html":{}}}],["e.value.city",{"_index":414,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["ect",{"_index":535,"title":{},"body":{"injectables/SolutionService.html":{}}}],["efface",{"_index":386,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["element",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["elle",{"_index":719,"title":{},"body":{"components/TableArcComponent.html":{}}}],["en",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["enlève",{"_index":661,"title":{},"body":{"components/TableArcComponent.html":{}}}],["entrée",{"_index":380,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["envoi",{"_index":286,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["envoy",{"_index":266,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["error",{"_index":657,"title":{},"body":{"components/TableArcComponent.html":{}}}],["essaie",{"_index":654,"title":{},"body":{"components/TableArcComponent.html":{}}}],["est",{"_index":294,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["et",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["evenly",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["eventemitter",{"_index":331,"title":{},"body":{"injectables/ArcService.html":{}}}],["explicite",{"_index":287,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["export",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["faire",{"_index":284,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["faisable",{"_index":643,"title":{},"body":{"components/TableArcComponent.html":{}}}],["fait",{"_index":720,"title":{},"body":{"components/TableArcComponent.html":{}}}],["false",{"_index":169,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["faudrait",{"_index":773,"title":{},"body":{"components/TableArcComponent.html":{}}}],["fichiers",{"_index":478,"title":{},"body":{"injectables/SolutionService.html":{}}}],["field",{"_index":404,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["fill",{"_index":768,"title":{},"body":{"components/TableArcComponent.html":{}}}],["findcitynamebyid",{"_index":459,"title":{},"body":{"injectables/SolutionService.html":{}}}],["findcitynamebyid(cities",{"_index":484,"title":{},"body":{"injectables/SolutionService.html":{}}}],["flex",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["flux",{"_index":265,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["fois",{"_index":740,"title":{},"body":{"components/TableArcComponent.html":{}}}],["fonction",{"_index":589,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["for(var",{"_index":605,"title":{},"body":{"injectables/SolutionService.html":{}}}],["forcément",{"_index":753,"title":{},"body":{"components/TableArcComponent.html":{}}}],["form",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["formcohorte",{"_index":198,"title":{},"body":{"components/AppComponent.html":{}}}],["formcohortecomponent",{"_index":30,"title":{"components/FormCohorteComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["forme",{"_index":505,"title":{},"body":{"injectables/SolutionService.html":{},"index.html":{}}}],["forms",{"_index":195,"title":{},"body":{"components/AppComponent.html":{}}}],["formsmodule",{"_index":354,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["formulaire",{"_index":374,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["framework",{"_index":876,"title":{},"body":{"index.html":{}}}],["galement",{"_index":906,"title":{},"body":{"index.html":{}}}],["generate",{"_index":926,"title":{},"body":{"index.html":{}}}],["gestion",{"_index":880,"title":{},"body":{"index.html":{}}}],["getcitiesposition",{"_index":460,"title":{},"body":{"injectables/SolutionService.html":{}}}],["getcohortecity",{"_index":309,"title":{},"body":{"injectables/ArcService.html":{}}}],["getinstance",{"_index":461,"title":{},"body":{"injectables/SolutionService.html":{}}}],["getinstancesolution",{"_index":462,"title":{},"body":{"injectables/SolutionService.html":{}}}],["getmapdata",{"_index":463,"title":{},"body":{"injectables/SolutionService.html":{}}}],["getpolylinearray",{"_index":310,"title":{},"body":{"injectables/ArcService.html":{}}}],["getsolution",{"_index":464,"title":{},"body":{"injectables/SolutionService.html":{}}}],["getting",{"_index":839,"title":{"index.html":{}},"body":{}}],["git",{"_index":886,"title":{},"body":{"index.html":{}}}],["gray",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["grâce",{"_index":512,"title":{},"body":{"injectables/SolutionService.html":{}}}],["guise",{"_index":865,"title":{},"body":{"index.html":{}}}],["gère",{"_index":348,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["générer",{"_index":918,"title":{},"body":{"index.html":{}}}],["gérant",{"_index":452,"title":{},"body":{"injectables/SolutionService.html":{}}}],["gérer",{"_index":305,"title":{},"body":{"injectables/ArcService.html":{}}}],["handlesaveerrors",{"_index":628,"title":{},"body":{"components/TableArcComponent.html":{}}}],["handlesaveerrors(error",{"_index":648,"title":{},"body":{"components/TableArcComponent.html":{}}}],["height",{"_index":178,"title":{},"body":{"components/AppComponent.html":{}}}],["hidepagesize]=\"true",{"_index":791,"title":{},"body":{"components/TableArcComponent.html":{}}}],["html",{"_index":236,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["http",{"_index":472,"title":{},"body":{"injectables/SolutionService.html":{}}}],["http://127.0.0.1:8080",{"_index":925,"title":{},"body":{"index.html":{}}}],["http://localhost:4200.vous",{"_index":904,"title":{},"body":{"index.html":{}}}],["http:httpclient",{"_index":547,"title":{},"body":{"injectables/SolutionService.html":{}}}],["httpclient",{"_index":470,"title":{},"body":{"injectables/SolutionService.html":{}}}],["httpclientmodule",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["https://github.com/bethencourtflorian/prd),ouvrez",{"_index":887,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":263,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["i].split('\\t",{"_index":604,"title":{},"body":{"injectables/SolutionService.html":{}}}],["icon",{"_index":422,"title":{},"body":{"components/FormCohorteComponent.html":{},"miscellaneous/variables.html":{}}}],["icon.png",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iconanchor",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icondefault",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["icons",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"dependencies.html":{}}}],["icons.ts",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iconsize",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iconurl",{"_index":805,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iconviolet",{"_index":409,"title":{},"body":{"components/FormCohorteComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iconvioleturl",{"_index":806,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["icône",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":291,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["identifier",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["if(city",{"_index":735,"title":{},"body":{"components/TableArcComponent.html":{}}}],["if(marker.options.alt",{"_index":415,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["if(this.cohortemarker",{"_index":416,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["il",{"_index":772,"title":{},"body":{"components/TableArcComponent.html":{}}}],["implements",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["import",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["imports",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["include/interfaces",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["include/leaflet",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{}}}],["index",{"_index":36,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"miscellaneous/variables.html":{}}}],["indextoremove",{"_index":744,"title":{},"body":{"components/TableArcComponent.html":{}}}],["indice",{"_index":290,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["indique",{"_index":292,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["infaisable",{"_index":656,"title":{},"body":{"components/TableArcComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["initialisation",{"_index":882,"title":{},"body":{"index.html":{}}}],["initialise",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["initialisée",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["injectable",{"_index":301,"title":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{}},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{},"coverage.html":{}}}],["injectables",{"_index":303,"title":{},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{},"overview.html":{}}}],["input",{"_index":399,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["inputs",{"_index":364,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["install",{"_index":896,"title":{},"body":{"index.html":{}}}],["installer",{"_index":897,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":436,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["instancesolutionurl",{"_index":455,"title":{},"body":{"injectables/SolutionService.html":{}}}],["instancesolutionurl:string",{"_index":544,"title":{},"body":{"injectables/SolutionService.html":{}}}],["instanceurl",{"_index":456,"title":{},"body":{"injectables/SolutionService.html":{}}}],["instanceurl:string",{"_index":543,"title":{},"body":{"injectables/SolutionService.html":{}}}],["interactive",{"_index":881,"title":{},"body":{"index.html":{}}}],["interface",{"_index":247,"title":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["interfaces",{"_index":248,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"overview.html":{}}}],["items",{"_index":209,"title":{},"body":{"components/AppComponent.html":{}}}],["j",{"_index":606,"title":{},"body":{"injectables/SolutionService.html":{}}}],["je",{"_index":746,"title":{},"body":{"components/TableArcComponent.html":{}}}],["justify",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["l",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["l'adresse",{"_index":903,"title":{},"body":{"index.html":{}}}],["l'affichage",{"_index":693,"title":{},"body":{"components/TableArcComponent.html":{}}}],["l'ancienne",{"_index":375,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["l'application",{"_index":15,"title":{},"body":{"components/AppComponent.html":{}}}],["l'arc",{"_index":259,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["l'enlève",{"_index":751,"title":{},"body":{"components/TableArcComponent.html":{}}}],["l'entièret",{"_index":912,"title":{},"body":{"index.html":{}}}],["l'icône",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l'id",{"_index":487,"title":{},"body":{"injectables/SolutionService.html":{}}}],["l'impact",{"_index":868,"title":{},"body":{"index.html":{}}}],["l'indice",{"_index":518,"title":{},"body":{"injectables/SolutionService.html":{}}}],["l'instance",{"_index":501,"title":{},"body":{"injectables/SolutionService.html":{}}}],["l'instant",{"_index":750,"title":{},"body":{"components/TableArcComponent.html":{}}}],["l'objet",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["l'ombre",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l'onglet",{"_index":910,"title":{},"body":{"index.html":{}}}],["l'outil",{"_index":916,"title":{},"body":{"index.html":{}}}],["l'utilisateur",{"_index":641,"title":{},"body":{"components/TableArcComponent.html":{}}}],["l.icon",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["l.map",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["l.map('map",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["l.marker",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["l.marker(latlngs",{"_index":564,"title":{},"body":{"injectables/SolutionService.html":{}}}],["l.marker.prototype.options.icon",{"_index":126,"title":{},"body":{"components/AppComponent.html":{}}}],["l.polyline",{"_index":261,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["l.tilelayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":147,"title":{},"body":{"components/AppComponent.html":{}}}],["la",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lancer",{"_index":907,"title":{},"body":{"index.html":{}}}],["lancez",{"_index":893,"title":{},"body":{"index.html":{}}}],["laquelle",{"_index":381,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["lat",{"_index":580,"title":{},"body":{"injectables/SolutionService.html":{}}}],["lat,lon",{"_index":585,"title":{},"body":{"injectables/SolutionService.html":{}}}],["latlngexpression",{"_index":405,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["latlngs:latlngexpression",{"_index":561,"title":{},"body":{"injectables/SolutionService.html":{}}}],["latérale",{"_index":848,"title":{},"body":{"index.html":{}}}],["layer",{"_index":435,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["lcr\",\"ser\",\"pla",{"_index":531,"title":{},"body":{"injectables/SolutionService.html":{}}}],["le",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["leaflet",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":235,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["length]=\"totalrecords",{"_index":790,"title":{},"body":{"components/TableArcComponent.html":{}}}],["les",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["ligne",{"_index":663,"title":{},"body":{"components/TableArcComponent.html":{}}}],["line",{"_index":557,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["line.destination",{"_index":745,"title":{},"body":{"components/TableArcComponent.html":{}}}],["line.index",{"_index":755,"title":{},"body":{"components/TableArcComponent.html":{}}}],["liste",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["loadmap",{"_index":45,"title":{},"body":{"components/AppComponent.html":{}}}],["lon",{"_index":582,"title":{},"body":{"injectables/SolutionService.html":{}}}],["maincontainer",{"_index":202,"title":{},"body":{"components/AppComponent.html":{}}}],["mais",{"_index":718,"title":{},"body":{"components/TableArcComponent.html":{}}}],["maladie",{"_index":851,"title":{},"body":{"index.html":{}}}],["manuellement",{"_index":538,"title":{},"body":{"injectables/SolutionService.html":{}}}],["map",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["mapdataurl",{"_index":457,"title":{},"body":{"injectables/SolutionService.html":{}}}],["mapdataurl:string",{"_index":542,"title":{},"body":{"injectables/SolutionService.html":{}}}],["mapdiv",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["marche",{"_index":717,"title":{},"body":{"components/TableArcComponent.html":{}}}],["marker",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["marker.addto(map",{"_index":569,"title":{},"body":{"injectables/SolutionService.html":{}}}],["marker.bindpopup(popupcontent",{"_index":167,"title":{},"body":{"components/AppComponent.html":{}}}],["marker.on('mouseout",{"_index":173,"title":{},"body":{"components/AppComponent.html":{}}}],["marker.on('mouseover",{"_index":170,"title":{},"body":{"components/AppComponent.html":{}}}],["marker.options.alt",{"_index":160,"title":{},"body":{"components/AppComponent.html":{}}}],["markersarray",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["markersarray.push(marker",{"_index":570,"title":{},"body":{"injectables/SolutionService.html":{}}}],["marqueur",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"miscellaneous/variables.html":{}}}],["marqueurs",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"miscellaneous/variables.html":{}}}],["mat",{"_index":771,"title":{},"body":{"components/TableArcComponent.html":{}}}],["matbuttonmodule",{"_index":613,"title":{},"body":{"components/TableArcComponent.html":{}}}],["matching",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matformfieldmodule",{"_index":351,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["matinputmodule",{"_index":353,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["matpaginator",{"_index":611,"title":{},"body":{"components/TableArcComponent.html":{}}}],["matselectchange",{"_index":370,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["matselectmodule",{"_index":352,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["mattable",{"_index":674,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mattabledatasource",{"_index":671,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mattabledatasource(polylinearray",{"_index":780,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mattablemodule",{"_index":610,"title":{},"body":{"components/TableArcComponent.html":{}}}],["max",{"_index":182,"title":{},"body":{"components/AppComponent.html":{}}}],["maxzoom",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["meilleur",{"_index":754,"title":{},"body":{"components/TableArcComponent.html":{}}}],["message",{"_index":651,"title":{},"body":{"components/TableArcComponent.html":{}}}],["metadata",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["methods",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["minzoom",{"_index":150,"title":{},"body":{"components/AppComponent.html":{}}}],["miscellaneous",{"_index":934,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["ml",{"_index":166,"title":{},"body":{"components/AppComponent.html":{}}}],["modification",{"_index":335,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["modifie",{"_index":319,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["modifier",{"_index":637,"title":{},"body":{"components/TableArcComponent.html":{},"index.html":{}}}],["modifiée",{"_index":640,"title":{},"body":{"components/TableArcComponent.html":{}}}],["modules",{"_index":929,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["modèle",{"_index":503,"title":{},"body":{"injectables/SolutionService.html":{},"index.html":{}}}],["mon",{"_index":857,"title":{},"body":{"index.html":{}}}],["mouseoutarc",{"_index":629,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mouseoutarc(data",{"_index":659,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mouseoverarc",{"_index":630,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mouseoverarc(data",{"_index":665,"title":{},"body":{"components/TableArcComponent.html":{}}}],["mèdle",{"_index":521,"title":{},"body":{"injectables/SolutionService.html":{}}}],["médicaux",{"_index":845,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":75,"title":{},"body":{"components/AppComponent.html":{}}}],["même",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["n",{"_index":448,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["name",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["nbcohortes",{"_index":596,"title":{},"body":{"injectables/SolutionService.html":{}}}],["nboccurences",{"_index":729,"title":{},"body":{"components/TableArcComponent.html":{}}}],["nboccurences.get(city",{"_index":733,"title":{},"body":{"components/TableArcComponent.html":{}}}],["nboccurences.set(city",{"_index":731,"title":{},"body":{"components/TableArcComponent.html":{}}}],["nbpatients",{"_index":270,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["nbvilles",{"_index":594,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ne",{"_index":497,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["new",{"_index":332,"title":{},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["newcity",{"_index":320,"title":{},"body":{"injectables/ArcService.html":{}}}],["newdestination:string",{"_index":707,"title":{},"body":{"components/TableArcComponent.html":{}}}],["newdestinationcoord",{"_index":713,"title":{},"body":{"components/TableArcComponent.html":{}}}],["neworigin:string",{"_index":705,"title":{},"body":{"components/TableArcComponent.html":{}}}],["neworigincoord",{"_index":710,"title":{},"body":{"components/TableArcComponent.html":{}}}],["newsolution",{"_index":618,"title":{},"body":{"components/TableArcComponent.html":{}}}],["ng",{"_index":824,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ngif",{"_index":612,"title":{},"body":{"components/TableArcComponent.html":{}}}],["ngoninit",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["nom",{"_index":255,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["nombre",{"_index":268,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["non",{"_index":296,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["notamment",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["nothing",{"_index":763,"title":{},"body":{"components/TableArcComponent.html":{}}}],["nouveau",{"_index":390,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["nouvelle",{"_index":321,"title":{},"body":{"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{}}}],["npm",{"_index":895,"title":{},"body":{"index.html":{}}}],["null",{"_index":759,"title":{},"body":{"components/TableArcComponent.html":{}}}],["number",{"_index":257,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["number(textlines[0",{"_index":595,"title":{},"body":{"injectables/SolutionService.html":{}}}],["number(textlines[1",{"_index":597,"title":{},"body":{"injectables/SolutionService.html":{}}}],["numéro",{"_index":258,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["objectif",{"_index":863,"title":{},"body":{"index.html":{}}}],["objet",{"_index":262,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["observable",{"_index":506,"title":{},"body":{"injectables/SolutionService.html":{}}}],["ok",{"_index":725,"title":{},"body":{"components/TableArcComponent.html":{}}}],["oninit",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["opacity",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["open",{"_index":908,"title":{},"body":{"index.html":{}}}],["openstreetmap",{"_index":154,"title":{},"body":{"components/AppComponent.html":{}}}],["optimale",{"_index":871,"title":{},"body":{"index.html":{}}}],["optimisation",{"_index":842,"title":{},"body":{"index.html":{}}}],["optional",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["origin",{"_index":251,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["ou",{"_index":295,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["outil",{"_index":859,"title":{},"body":{"index.html":{}}}],["ouvre",{"_index":924,"title":{},"body":{"index.html":{}}}],["ouvrir",{"_index":909,"title":{},"body":{"index.html":{}}}],["ouvrira",{"_index":900,"title":{},"body":{"index.html":{}}}],["overview",{"_index":930,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":811,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":680,"title":{},"body":{"components/TableArcComponent.html":{}}}],["pageindex",{"_index":619,"title":{},"body":{"components/TableArcComponent.html":{}}}],["pageindex]=\"pageindex",{"_index":789,"title":{},"body":{"components/TableArcComponent.html":{}}}],["pagesize",{"_index":620,"title":{},"body":{"components/TableArcComponent.html":{}}}],["pagesize]=\"pagesize",{"_index":788,"title":{},"body":{"components/TableArcComponent.html":{}}}],["paginateur",{"_index":686,"title":{},"body":{"components/TableArcComponent.html":{}}}],["paginator",{"_index":621,"title":{},"body":{"components/TableArcComponent.html":{}}}],["par",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["paramètre",{"_index":489,"title":{},"body":{"injectables/SolutionService.html":{}}}],["parsecities",{"_index":465,"title":{},"body":{"injectables/SolutionService.html":{}}}],["parsecitiesposition",{"_index":466,"title":{},"body":{"injectables/SolutionService.html":{}}}],["parserepartitiontube",{"_index":467,"title":{},"body":{"injectables/SolutionService.html":{}}}],["parsesolution",{"_index":468,"title":{},"body":{"injectables/SolutionService.html":{}}}],["partie",{"_index":856,"title":{},"body":{"index.html":{}}}],["pas",{"_index":727,"title":{},"body":{"components/TableArcComponent.html":{}}}],["passe",{"_index":667,"title":{},"body":{"components/TableArcComponent.html":{}}}],["patients",{"_index":269,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["permet",{"_index":333,"title":{},"body":{"injectables/ArcService.html":{},"index.html":{}}}],["permettant",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["peut",{"_index":539,"title":{},"body":{"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["pointer",{"_index":234,"title":{},"body":{"components/AppComponent.html":{}}}],["polyline",{"_index":252,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["polylinearray",{"_index":307,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["polylinearray.splice(indextoremove,1",{"_index":778,"title":{},"body":{"components/TableArcComponent.html":{}}}],["polylineupdated",{"_index":308,"title":{},"body":{"injectables/ArcService.html":{}}}],["polylineupdated:eventemitter",{"_index":339,"title":{},"body":{"injectables/ArcService.html":{}}}],["popperjs/core",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["popup",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["popupanchor",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["popupcontent",{"_index":161,"title":{},"body":{"components/AppComponent.html":{}}}],["position",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["positions",{"_index":515,"title":{},"body":{"injectables/SolutionService.html":{}}}],["pour",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["pouvez",{"_index":905,"title":{},"body":{"index.html":{}}}],["pouvoir",{"_index":540,"title":{},"body":{"injectables/SolutionService.html":{},"index.html":{}}}],["prd",{"_index":841,"title":{},"body":{"index.html":{}}}],["present",{"_index":762,"title":{},"body":{"components/TableArcComponent.html":{}}}],["previous",{"_index":421,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["principal",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{}}}],["private",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["projet",{"_index":854,"title":{},"body":{"index.html":{}}}],["properties",{"_index":37,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"properties.html":{}}}],["proposée",{"_index":508,"title":{},"body":{"injectables/SolutionService.html":{}}}],["proposées",{"_index":862,"title":{},"body":{"index.html":{}}}],["provenant",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["providedin",{"_index":338,"title":{},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{}}}],["prélèvement",{"_index":280,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["public",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["pull",{"_index":884,"title":{},"body":{"index.html":{}}}],["push",{"_index":760,"title":{},"body":{"components/TableArcComponent.html":{}}}],["qu'une",{"_index":738,"title":{},"body":{"components/TableArcComponent.html":{}}}],["quand",{"_index":653,"title":{},"body":{"components/TableArcComponent.html":{}}}],["quantit",{"_index":282,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["quantity",{"_index":253,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["que",{"_index":721,"title":{},"body":{"components/TableArcComponent.html":{},"index.html":{}}}],["qui",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{}}}],["quoi",{"_index":749,"title":{},"body":{"components/TableArcComponent.html":{}}}],["radius",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["refreshbutton",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["refreshbutton:hover",{"_index":231,"title":{},"body":{"components/AppComponent.html":{}}}],["regénérer",{"_index":923,"title":{},"body":{"index.html":{}}}],["relative",{"_index":203,"title":{},"body":{"components/AppComponent.html":{}}}],["remove",{"_index":756,"title":{},"body":{"components/TableArcComponent.html":{}}}],["removearcs",{"_index":361,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["remplir",{"_index":673,"title":{},"body":{"components/TableArcComponent.html":{}}}],["renvoie",{"_index":315,"title":{},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{}}}],["repository",{"_index":885,"title":{},"body":{"index.html":{}}}],["requêtes",{"_index":474,"title":{},"body":{"injectables/SolutionService.html":{}}}],["reset",{"_index":420,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["respectivement",{"_index":927,"title":{},"body":{"index.html":{}}}],["responsetype",{"_index":553,"title":{},"body":{"injectables/SolutionService.html":{}}}],["reste",{"_index":642,"title":{},"body":{"components/TableArcComponent.html":{}}}],["results",{"_index":245,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retour",{"_index":80,"title":{},"body":{"components/AppComponent.html":{}}}],["retourne",{"_index":517,"title":{},"body":{"injectables/SolutionService.html":{}}}],["return",{"_index":340,"title":{},"body":{"injectables/ArcService.html":{},"injectables/SolutionService.html":{}}}],["returns",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["right",{"_index":213,"title":{},"body":{"components/AppComponent.html":{}}}],["root",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"injectables/SolutionService.html":{}}}],["root'},{'name",{"_index":240,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["row",{"_index":189,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":922,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["récupérer",{"_index":475,"title":{},"body":{"injectables/SolutionService.html":{}}}],["réinitialise",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["réinitialiser",{"_index":664,"title":{},"body":{"components/TableArcComponent.html":{}}}],["répartition",{"_index":519,"title":{},"body":{"injectables/SolutionService.html":{}}}],["résultat",{"_index":722,"title":{},"body":{"components/TableArcComponent.html":{}}}],["sa",{"_index":864,"title":{},"body":{"index.html":{}}}],["sais",{"_index":747,"title":{},"body":{"components/TableArcComponent.html":{}}}],["sanguin",{"_index":279,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["sauvegarder",{"_index":655,"title":{},"body":{"components/TableArcComponent.html":{}}}],["savoir",{"_index":858,"title":{},"body":{"index.html":{}}}],["sclérose",{"_index":847,"title":{},"body":{"index.html":{}}}],["selecteddestination",{"_index":622,"title":{},"body":{"components/TableArcComponent.html":{}}}],["selectedorigin",{"_index":623,"title":{},"body":{"components/TableArcComponent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["serve",{"_index":899,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":901,"title":{},"body":{"index.html":{}}}],["service",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["setcohortecity",{"_index":311,"title":{},"body":{"injectables/ArcService.html":{}}}],["setcohortecity(newcity",{"_index":317,"title":{},"body":{"injectables/ArcService.html":{}}}],["setpolylinearray",{"_index":312,"title":{},"body":{"injectables/ArcService.html":{}}}],["setpolylinearray(data",{"_index":322,"title":{},"body":{"injectables/ArcService.html":{}}}],["setpolylinearray(data:arc",{"_index":343,"title":{},"body":{"injectables/ArcService.html":{}}}],["settimeout",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["seule",{"_index":646,"title":{},"body":{"components/TableArcComponent.html":{}}}],["shadow.png",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shadowsize",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shadowurl",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["showsavebutton",{"_index":624,"title":{},"body":{"components/TableArcComponent.html":{}}}],["si",{"_index":293,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["sinon",{"_index":493,"title":{},"body":{"injectables/SolutionService.html":{}}}],["site",{"_index":920,"title":{},"body":{"index.html":{}}}],["sla",{"_index":850,"title":{},"body":{"index.html":{}}}],["solid",{"_index":224,"title":{},"body":{"components/AppComponent.html":{}}}],["solution",{"_index":40,"title":{"interfaces/Solution.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"index.html":{}}}],["solution.cohortes",{"_index":442,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["solution.service",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["solution:solution",{"_index":586,"title":{},"body":{"injectables/SolutionService.html":{}}}],["solutions",{"_index":861,"title":{},"body":{"index.html":{}}}],["solutionservice",{"_index":50,"title":{"injectables/SolutionService.html":{}},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["solutionservice.solution",{"_index":412,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["solutionservice:solutionservice",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["sont",{"_index":536,"title":{},"body":{"injectables/SolutionService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["souris",{"_index":662,"title":{},"body":{"components/TableArcComponent.html":{}}}],["sous",{"_index":504,"title":{},"body":{"injectables/SolutionService.html":{}}}],["space",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["src/.../leaflet",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:107",{"_index":74,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:27",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:32",{"_index":105,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:37",{"_index":52,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:49",{"_index":89,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:60",{"_index":86,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:80",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/arc.service.ts",{"_index":304,"title":{},"body":{"injectables/ArcService.html":{},"coverage.html":{}}}],["src/app/arc.service.ts:15",{"_index":329,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:20",{"_index":330,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:25",{"_index":313,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:36",{"_index":314,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:44",{"_index":318,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:52",{"_index":316,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/arc.service.ts:60",{"_index":323,"title":{},"body":{"injectables/ArcService.html":{}}}],["src/app/form",{"_index":346,"title":{},"body":{"components/FormCohorteComponent.html":{},"coverage.html":{}}}],["src/app/include/interfaces.ts",{"_index":249,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["src/app/include/leaflet",{"_index":802,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/solution.service.ts",{"_index":451,"title":{},"body":{"injectables/SolutionService.html":{},"coverage.html":{}}}],["src/app/solution.service.ts:101",{"_index":481,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:124",{"_index":511,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:148",{"_index":514,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:169",{"_index":520,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:18",{"_index":530,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:23",{"_index":527,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:259",{"_index":516,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:28",{"_index":524,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:283",{"_index":485,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:34",{"_index":532,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:39",{"_index":522,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:44",{"_index":471,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:59",{"_index":509,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:67",{"_index":500,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:75",{"_index":507,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:83",{"_index":499,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/solution.service.ts:91",{"_index":510,"title":{},"body":{"injectables/SolutionService.html":{}}}],["src/app/table",{"_index":608,"title":{},"body":{"components/TableArcComponent.html":{},"coverage.html":{}}}],["standalone",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["started",{"_index":840,"title":{"index.html":{}},"body":{}}],["statements",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":254,"title":{},"body":{"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":223,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurl",{"_index":356,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["styleurls",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["suppression",{"_index":777,"title":{},"body":{"components/TableArcComponent.html":{}}}],["sur",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["sélection",{"_index":349,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["sélectionnées",{"_index":636,"title":{},"body":{"components/TableArcComponent.html":{}}}],["table",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["tablearc",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["tablearccomponent",{"_index":31,"title":{"components/TableArcComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["tableau",{"_index":274,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["taille",{"_index":695,"title":{},"body":{"components/TableArcComponent.html":{}}}],["technologies",{"_index":872,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["templateurl",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["terminal",{"_index":888,"title":{},"body":{"index.html":{}}}],["text",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"injectables/SolutionService.html":{}}}],["texte",{"_index":502,"title":{},"body":{"injectables/SolutionService.html":{}}}],["textlines",{"_index":592,"title":{},"body":{"injectables/SolutionService.html":{}}}],["textlines[2].split('\\t",{"_index":599,"title":{},"body":{"injectables/SolutionService.html":{}}}],["textlines[3].split('\\t",{"_index":601,"title":{},"body":{"injectables/SolutionService.html":{}}}],["textlines[6+nbtypes*nbcohortes",{"_index":603,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.arcservice.getcohortecity",{"_index":724,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.arcservice.setcohortecity(city",{"_index":425,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.arcservice.setpolylinearray(this.tube.arcs",{"_index":433,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.cities",{"_index":734,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.cities.foreach(city",{"_index":730,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.cities.indexof(line.destination",{"_index":764,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.cities.indexof(line.origin",{"_index":757,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.cities.push(line.destination",{"_index":765,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.cities.push(line.origin",{"_index":758,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.citiesposition",{"_index":548,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.citiesposition.get(city.name)![0",{"_index":562,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.citiesposition.get(city.name)![1",{"_index":563,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.cohortecity",{"_index":341,"title":{},"body":{"injectables/ArcService.html":{}}}],["this.cohortemarker",{"_index":417,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.cohortemarker.seticon(icondefault",{"_index":419,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.cohortemarker.seticon(iconviolet",{"_index":418,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.createmarkerspopup",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["this.datasource",{"_index":779,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.datasource.paginator",{"_index":783,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.drawpolylines(this.map",{"_index":431,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.getinstance().subscribe(data",{"_index":591,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.getinstancesolution().subscribe(data",{"_index":607,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.getmapdata().subscribe((cities:any",{"_index":578,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.getmapdata().subscribe((data:any",{"_index":571,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.handlesaveerrors(error",{"_index":728,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.http.get(this.instancesolutionurl",{"_index":554,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.http.get(this.instanceurl",{"_index":552,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.http.get(this.mapdataurl",{"_index":551,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.loadmap",{"_index":132,"title":{},"body":{"components/AppComponent.html":{}}}],["this.map",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["this.map.eachlayer((layer:any",{"_index":434,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.map.flyto([47.338",{"_index":175,"title":{},"body":{"components/AppComponent.html":{}}}],["this.map.removelayer(layer",{"_index":437,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.map.setmaxbounds(this.map.getbounds",{"_index":156,"title":{},"body":{"components/AppComponent.html":{}}}],["this.markersarray",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{}}}],["this.paginator",{"_index":784,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.parsecities",{"_index":587,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.parsecitiesposition",{"_index":549,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.parsesolution",{"_index":550,"title":{},"body":{"injectables/SolutionService.html":{}}}],["this.polylinearray",{"_index":342,"title":{},"body":{"injectables/ArcService.html":{},"components/TableArcComponent.html":{}}}],["this.polylinearray.length",{"_index":782,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.polylinearray[index].polyline.setlatlngs([neworigincoord",{"_index":716,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.polylineupdated.emit(this.polylinearray",{"_index":345,"title":{},"body":{"injectables/ArcService.html":{}}}],["this.removearcs",{"_index":430,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.selecteddestination",{"_index":742,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selecteddestination.foreach(city",{"_index":732,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selecteddestination.includes(cohortecity",{"_index":726,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selecteddestination.push(line.destination",{"_index":767,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selecteddestination[index",{"_index":708,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selectedorigin",{"_index":741,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selectedorigin.push(line.origin",{"_index":766,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.selectedorigin[index",{"_index":706,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.showsavebutton",{"_index":785,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.solution",{"_index":411,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{}}}],["this.solution.cities",{"_index":135,"title":{},"body":{"components/AppComponent.html":{}}}],["this.solution.demande.get(city)!.get(this.solution.types[i",{"_index":165,"title":{},"body":{"components/AppComponent.html":{}}}],["this.solution.types[i",{"_index":164,"title":{},"body":{"components/AppComponent.html":{}}}],["this.solutionservice.drawcities(this.map",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["this.solutionservice.getcitiesposition",{"_index":709,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.solutionservice.getsolution",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["this.totalrecords",{"_index":781,"title":{},"body":{"components/TableArcComponent.html":{}}}],["this.tube",{"_index":428,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.tube.arcs",{"_index":432,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.tubechange",{"_index":429,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.type",{"_index":426,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.typechange",{"_index":427,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["this.types.slice(0,2",{"_index":590,"title":{},"body":{"injectables/SolutionService.html":{}}}],["tiles",{"_index":146,"title":{},"body":{"components/AppComponent.html":{}}}],["tiles.addto(this.map",{"_index":155,"title":{},"body":{"components/AppComponent.html":{}}}],["titres",{"_index":676,"title":{},"body":{"components/TableArcComponent.html":{}}}],["todo",{"_index":283,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["tooltipanchor",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["top",{"_index":211,"title":{},"body":{"components/AppComponent.html":{}}}],["totalrecords",{"_index":625,"title":{},"body":{"components/TableArcComponent.html":{}}}],["tous",{"_index":325,"title":{},"body":{"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{}}}],["toutes",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{},"index.html":{}}}],["track",{"_index":443,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["transmet",{"_index":324,"title":{},"body":{"injectables/ArcService.html":{}}}],["transmettre",{"_index":334,"title":{},"body":{"injectables/ArcService.html":{}}}],["tre",{"_index":383,"title":{},"body":{"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["trop",{"_index":748,"title":{},"body":{"components/TableArcComponent.html":{}}}],["trouver",{"_index":491,"title":{},"body":{"injectables/SolutionService.html":{}}}],["true",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["tslib",{"_index":407,"title":{},"body":{"components/FormCohorteComponent.html":{},"dependencies.html":{}}}],["tube",{"_index":273,"title":{"interfaces/Tube.html":{}},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{}}}],["tube(s",{"_index":447,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["tube.number",{"_index":450,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["tubechange",{"_index":362,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["tubes",{"_index":277,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["txt",{"_index":479,"title":{},"body":{"injectables/SolutionService.html":{}}}],["type",{"_index":58,"title":{"interfaces/Type.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.name",{"_index":446,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["type.tubes",{"_index":449,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["typechange",{"_index":363,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["types",{"_index":272,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["types:string",{"_index":545,"title":{},"body":{"injectables/SolutionService.html":{}}}],["typescript",{"_index":875,"title":{},"body":{"index.html":{}}}],["ugly",{"_index":556,"title":{},"body":{"injectables/SolutionService.html":{}}}],["un",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{},"index.html":{}}}],["undefined",{"_index":271,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["une",{"_index":285,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["unique",{"_index":739,"title":{},"body":{"components/TableArcComponent.html":{}}}],["update",{"_index":775,"title":{},"body":{"components/TableArcComponent.html":{}}}],["url",{"_index":525,"title":{},"body":{"injectables/SolutionService.html":{},"miscellaneous/variables.html":{}}}],["utilise",{"_index":915,"title":{},"body":{"index.html":{}}}],["utilisées",{"_index":873,"title":{},"body":{"index.html":{}}}],["valeurs",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/TableArcComponent.html":{}}}],["value",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"miscellaneous/variables.html":{}}}],["valuer",{"_index":867,"title":{},"body":{"index.html":{}}}],["var",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/FormCohorteComponent.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{}}}],["variable",{"_index":393,"title":{},"body":{"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{},"coverage.html":{}}}],["variables",{"_index":935,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":932,"title":{},"body":{"properties.html":{}}}],["via",{"_index":477,"title":{},"body":{"injectables/SolutionService.html":{}}}],["vide",{"_index":495,"title":{},"body":{"injectables/SolutionService.html":{}}}],["viewchild",{"_index":696,"title":{},"body":{"components/TableArcComponent.html":{}}}],["viewchild('paginator",{"_index":684,"title":{},"body":{"components/TableArcComponent.html":{}}}],["ville",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Arc.html":{},"injectables/ArcService.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["villes",{"_index":298,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"interfaces/Solution.html":{},"injectables/SolutionService.html":{},"components/TableArcComponent.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["violet.png",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["violette",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visualisation",{"_index":860,"title":{},"body":{"index.html":{}}}],["void",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/ArcService.html":{},"components/FormCohorteComponent.html":{},"components/TableArcComponent.html":{}}}],["volume",{"_index":281,"title":{},"body":{"interfaces/Arc.html":{},"interfaces/City.html":{},"interfaces/Cohorte.html":{},"components/FormCohorteComponent.html":{},"interfaces/Solution.html":{},"interfaces/Tube.html":{},"interfaces/Type.html":{}}}],["voulu",{"_index":350,"title":{},"body":{"components/FormCohorteComponent.html":{}}}],["vous",{"_index":890,"title":{},"body":{"index.html":{}}}],["vérifie",{"_index":639,"title":{},"body":{"components/TableArcComponent.html":{}}}],["web.la",{"_index":921,"title":{},"body":{"index.html":{}}}],["weight",{"_index":702,"title":{},"body":{"components/TableArcComponent.html":{}}}],["white",{"_index":218,"title":{},"body":{"components/AppComponent.html":{}}}],["width",{"_index":180,"title":{},"body":{"components/AppComponent.html":{}}}],["work",{"_index":558,"title":{},"body":{"injectables/SolutionService.html":{}}}],["z",{"_index":229,"title":{},"body":{"components/AppComponent.html":{}}}],["zone.js",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":83,"title":{},"body":{"components/AppComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant principal de l'application, contient notamment la carte\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                Standalone\n                true\n            \n\n            \n                imports\n                \n                            HttpClientModule\n                                FormCohorteComponent\n                                TableArcComponent\n                \n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                map\n                            \n                            \n                                markersArray\n                            \n                            \n                                solution\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarkersPopup\n                            \n                            \n                                defaultZoom\n                            \n                            \n                                    Private\n                                loadMap\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(solutionService: SolutionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:37\n                            \n                        \n\n                \n                    \n                            Constructeur du composant\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        solutionService\n                                                  \n                                                        \n                                                                        SolutionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service permettant de créer l'objet Solution\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkersPopup\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkersPopup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Crée un popup pour chaque marqueur sur la carte\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultZoom\n                        \n                    \n                \n            \n            \n                \ndefaultZoom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Méthode appelée depuis le bouton \"Retour\" qui réinitialise le zoom et la position de la carte\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadMap\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Initialise la carte Leaflet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Initialise toutes les valeurs du composant\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:27\n                        \n                    \n\n            \n                \n                    Carte Leaflet\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markersArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Marker[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:37\n                        \n                    \n\n            \n                \n                    Liste des marqueurs Leaflet de la carte (1 marqueur par ville)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        solution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Solution\n\n                    \n                \n                \n                    \n                        Default value : this.solutionService.getSolution()\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:32\n                        \n                    \n\n            \n                \n                    Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { HttpClientModule} from '@angular/common/http';\nimport { SolutionService } from './solution.service';\nimport { FormCohorteComponent } from './form-cohorte/form-cohorte.component';\nimport { TableArcComponent } from './table-arc/table-arc.component';\nimport { iconDefault } from './include/leaflet-icons';\n\nimport * as L from 'leaflet';\nimport { Solution } from './include/interfaces';\n\nL.Marker.prototype.options.icon = iconDefault;\n\n/**\n * Composant principal de l'application, contient notamment la carte\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  templateUrl: './app.component.html',\n  imports: [HttpClientModule, FormCohorteComponent, TableArcComponent],\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  /**\n   * Carte Leaflet\n   */\n  map!: L.Map;\n  \n  /**\n   * Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n   */\n  solution: Solution = this.solutionService.getSolution();\n\n   /**\n   * Liste des marqueurs Leaflet de la carte (1 marqueur par ville)\n   */\n  markersArray: L.Marker[] = [];\n\n  /**\n   * Constructeur du composant\n   * @param solutionService Service permettant de créer l'objet Solution\n   */\n  constructor(private solutionService:SolutionService) {\n  }\n\n  /**\n   * Initialise toutes les valeurs du composant\n   */\n  public ngOnInit(): void {\n    this.loadMap();\n    this.markersArray = this.solutionService.drawCities(this.map, this.solution.cities);\n    setTimeout(() => {\n      this.createMarkersPopup()\n    }, 500);\n  }\n\n  /**\n   * Initialise la carte Leaflet\n   */\n  private loadMap(): void {\n    this.map = L.map('map', {\n      center: [47.338, 2.071],\n      zoom: 6\n    });\n\n    const tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 18,\n      minZoom: 3,\n      attribution: '&copy; OpenStreetMap'\n    });\n\n    tiles.addTo(this.map);\n\n    this.map.setMaxBounds(this.map.getBounds());\n  }\n\n  /**\n   * Crée un popup pour chaque marqueur sur la carte\n   */\n  private createMarkersPopup(){\n    for (const marker of this.markersArray){\n      var city = marker.options.alt  || \"\";\n      var popupContent = `` + `Ville : ${ city } \n                                    Demande : \n                                    `;\n\n      for (var i = 0; i ${ this.solution.types[i] } : ${ this.solution.demande.get(city)!.get(this.solution.types[i]) } mL`\n      }\n\n      popupContent += ``\n\n      marker.bindPopup(popupContent, {autoPan: false});\n      marker.on('mouseover', (e) => {\n        e.target.openPopup();\n      });\n\n      marker.on('mouseout', (e) => {\n        e.target.closePopup();\n      });\n    }\n  }\n\n  /**\n   * Méthode appelée depuis le bouton \"Retour\" qui réinitialise le zoom et la position de la carte\n   */\n  defaultZoom(){\n    this.map.flyTo([47.338, 2.071], 6, {\n      animate: true,\n      duration: 1\n    });\n  }\n}\n    \n\n    \n        \n  \n    Retour\n  \n  \n    \n    \n  \n\n    \n\n    \n                \n                    ./app.component.css\n                \n                #map {\n    height: 650px;\n    width: 70%;\n    max-width: 700px;\n}\n\n.app-container-div{\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-evenly;\n}\n\n.forms {\n  width: 30%;\n  display: flex;\n  flex-direction: column;\n}\n\n#formCohorte{\n  height: 15%;\n}\n\n#tableArc{\n  height: 85%;\n}\n\n#mainContainer{\n  position: relative;\n  width: 100%;\n  height: calc(100% - 80px);\n  display: flex;\n}\n\n#mapDiv {\n  flex: 1;\n}\n\n#refreshButton{\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  width: 100px;\n  height: 50px;\n  background-color: white;\n  border-radius: 5px;\n  border-color: gray;\n  border-style: solid;\n  border-width: 1px 1px 1px 1px;\n  opacity: 0.6;\n  text-align: center;\n  z-index: 500;\n  color: black;\n}\n#refreshButton:hover{\n  opacity: 0.8;\n  cursor: pointer;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Retour              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FormCohorteComponent', 'selector': 'app-form-cohorte'},{'name': 'TableArcComponent', 'selector': 'app-table-arc'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Arc.html":{"url":"interfaces/Arc.html","title":"interface - Arc","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Arc\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour un arc\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            origin\n                                        \n                                \n                                \n                                        \n                                            polyline\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nom de la ville d'arrivée\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Numéro de l'arc\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        origin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        origin:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nom de la ville de départ\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        polyline\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        polyline:     L.Polyline\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     L.Polyline\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Flux envoyé de la ville origin à la ville destination\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArcService.html":{"url":"injectables/ArcService.html","title":"injectable - ArcService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArcService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/arc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service pour gérer les arcs de la carte\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cohorteCity\n                            \n                            \n                                    Private\n                                polylineArray\n                            \n                            \n                                polylineUpdated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCohorteCity\n                            \n                            \n                                getPolylineArray\n                            \n                            \n                                setCohorteCity\n                            \n                            \n                                setPolylineArray\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/arc.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructeur du service\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCohorteCity\n                        \n                    \n                \n            \n            \n                \ngetCohorteCity()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/arc.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Renvoie la ville de départ de la cohorte\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                La ville de départ de la cohorte\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPolylineArray\n                        \n                    \n                \n            \n            \n                \ngetPolylineArray()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/arc.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Renvoie la liste des arcs\n\n\n                        \n                            Returns :         Arc[]\n\n                        \n                            \n                                La liste des arcs\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCohorteCity\n                        \n                    \n                \n            \n            \n                \nsetCohorteCity(newCity: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/arc.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Modifie la ville de départ de la cohorte\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newCity\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La nouvelle ville de départ\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPolylineArray\n                        \n                    \n                \n            \n            \n                \nsetPolylineArray(data: Arc[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/arc.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Modifie la liste des arcs et la transmet à tous les composants qui le demandent\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Arc[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La nouvelle liste d'arcs\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cohorteCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/arc.service.ts:15\n                        \n                    \n\n            \n                \n                    Ville de départ de la cohorte\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        polylineArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Arc[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/arc.service.ts:20\n                        \n                    \n\n            \n                \n                    Liste des arcs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        polylineUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/arc.service.ts:25\n                        \n                    \n\n            \n                \n                    Permet de transmettre la liste des arcs à chaque modification de celle-ci\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { Arc } from './include/interfaces';\n\n/**\n * Service pour gérer les arcs de la carte\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArcService {\n\n  /**\n   * Ville de départ de la cohorte\n   */\n  private cohorteCity: string = \"\";\n\n  /**\n   * Liste des arcs\n   */\n  private polylineArray: Arc[] = [];\n\n  /**\n   * Permet de transmettre la liste des arcs à chaque modification de celle-ci\n   */\n  polylineUpdated:EventEmitter = new EventEmitter();\n\n  /**\n   * Constructeur du service\n   */\n  constructor() { }\n\n  /**\n   * Renvoie la ville de départ de la cohorte\n   * @returns La ville de départ de la cohorte\n   */\n  getCohorteCity(): string{\n    return this.cohorteCity;\n  }\n\n  /**\n   * Modifie la ville de départ de la cohorte\n   * @param newCity La nouvelle ville de départ \n   */\n  setCohorteCity(newCity: string){\n    this.cohorteCity = newCity\n  }\n\n  /**\n   * Renvoie la liste des arcs\n   * @returns La liste des arcs\n   */\n  getPolylineArray(): Arc[]{\n    return this.polylineArray;\n  }\n\n  /**\n   * Modifie la liste des arcs et la transmet à tous les composants qui le demandent  \n   * @param data La nouvelle liste d'arcs\n   */\n  setPolylineArray(data:Arc[]){\n    //console.log(data);\n    this.polylineArray = data;\n    this.polylineUpdated.emit(this.polylineArray);\n  }\n\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/City.html":{"url":"interfaces/City.html","title":"interface - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour une ville\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cohorte\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cohorte\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cohorte:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indique si la ville est une cohorte ou non\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indice de la ville\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nom de la ville\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cohorte.html":{"url":"interfaces/Cohorte.html","title":"interface - Cohorte","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cohorte\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour une cohorte\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            city\n                                        \n                                \n                                \n                                        \n                                            nbPatients\n                                        \n                                \n                                \n                                        \n                                            types\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        city:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ville de départ de la cohorte\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nbPatients\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nbPatients:     number | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | undefined\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nombre de patients de la cohorte\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        types:         Type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Types de tube de la cohorte\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormCohorteComponent.html":{"url":"components/FormCohorteComponent.html","title":"component - FormCohorteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FormCohorteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/form-cohorte/form-cohorte.component.ts\n\n\n\n    \n        Description\n    \n    \n        FormCohorteComponent gère la sélection de la cohorte, du type et du tube voulu\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-form-cohorte\n            \n\n            \n                Standalone\n                true\n            \n\n            \n                imports\n                \n                            MatFormFieldModule\n                            MatSelectModule\n                            MatInputModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./form-cohorte.component.html\n            \n\n\n\n            \n                styleUrl\n                ./form-cohorte.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cohorte\n                            \n                            \n                                cohorteMarker\n                            \n                            \n                                solution\n                            \n                            \n                                tube\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cohorteChange\n                            \n                            \n                                    Private\n                                drawPolylines\n                            \n                            \n                                removeArcs\n                            \n                            \n                                tubeChange\n                            \n                            \n                                typeChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                map\n                            \n                            \n                                markersArray\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(solutionService: SolutionService, arcService: ArcService)\n                    \n                \n                        \n                            \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:68\n                            \n                        \n\n                \n                    \n                            Constructeur du composant\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        solutionService\n                                                  \n                                                        \n                                                                        SolutionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service permettant de créer l'objet Solution\n\n                                                        \n                                                \n                                                \n                                                        arcService\n                                                  \n                                                        \n                                                                        ArcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service permettant de créér les arcs\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        map\n                    \n                \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/form-cohorte/form-cohorte.component.ts:27\n                            \n                        \n                \n                    \n                        Carte Leaflet du composant principal\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markersArray\n                    \n                \n                \n                    \n                        Type :     L.Marker[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/form-cohorte/form-cohorte.component.ts:32\n                            \n                        \n                \n                    \n                        Liste des marqueurs Leaflet de la carte (1 marqueur par ville)\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cohorteChange\n                        \n                    \n                \n            \n            \n                \ncohorteChange(e: MatSelectChange)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/form-cohorte/form-cohorte.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Gère la sélection d'une nouvelle cohorte dans le formulaire\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                e\n                                            \n                                                        MatSelectChange\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contient l'ancienne cohorte et la nouvelle choisie\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        drawPolylines\n                        \n                    \n                \n            \n            \n                \n                        \n                    drawPolylines(map: L.Map, arcs: Arc[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/form-cohorte/form-cohorte.component.ts:144\n                        \n                    \n\n\n            \n                \n                        Dessine les arcs en entrée sur la carte\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                map\n                                            \n                                                        L.Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La carte sur laquelle les arcs doivent être ajoutés\n\n                                            \n                                        \n                                        \n                                                arcs\n                                            \n                                                            Arc[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeArcs\n                        \n                    \n                \n            \n            \n                \nremoveArcs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/form-cohorte/form-cohorte.component.ts:131\n                        \n                    \n\n\n            \n                \n                        Efface tous les arcs créés\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tubeChange\n                        \n                    \n                \n            \n            \n                \ntubeChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/form-cohorte/form-cohorte.component.ts:122\n                        \n                    \n\n\n            \n                \n                        Gère la sélection d'un nouveau tube dans le formulaire\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeChange\n                        \n                    \n                \n            \n            \n                \ntypeChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/form-cohorte/form-cohorte.component.ts:110\n                        \n                    \n\n\n            \n                \n                        Gère la sélection d'un nouveau type de tube dans le formulaire\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cohorte\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cohorte\n\n                    \n                \n                \n                    \n                        Default value : {\n    nbPatients: 0,\n    city: \"\",\n    types: []\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:42\n                        \n                    \n\n            \n                \n                    Variable contenant la cohorte choisie dans le formulaire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cohorteMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Marker | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:37\n                        \n                    \n\n            \n                \n                    Marqueur de la ville de départ de la cohorte\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        solution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Solution\n\n                    \n                \n                \n                    \n                        Default value : this.solutionService.getSolution()\n                    \n                \n                    \n                        \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:68\n                        \n                    \n\n            \n                \n                    Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tube\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tube\n\n                    \n                \n                \n                    \n                        Default value : {\n    number: 0,\n    volume: 0,\n    arcs: []\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:59\n                        \n                    \n\n            \n                \n                    Variable contenant le tube choisi dans le formulaire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"\",\n    tubes: []\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/form-cohorte/form-cohorte.component.ts:51\n                        \n                    \n\n            \n                \n                    Variable contenant le type de tube choisi dans le formulaire\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectChange, MatSelectModule} from '@angular/material/select';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { SolutionService } from '../solution.service';\nimport L, { LatLngExpression } from 'leaflet';\nimport { __propKey } from 'tslib';\nimport { ArcService } from '../arc.service';\nimport { iconDefault, iconViolet } from '../include/leaflet-icons';\nimport { Cohorte, Type, Tube, Arc, Solution } from '../include/interfaces';\n\n/**\n * FormCohorteComponent gère la sélection de la cohorte, du type et du tube voulu\n */\n@Component({\n  selector: 'app-form-cohorte',\n  standalone: true,\n  imports: [MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule],\n  templateUrl: './form-cohorte.component.html',\n  styleUrl: './form-cohorte.component.scss'\n})\nexport class FormCohorteComponent {\n  /**\n   * Carte Leaflet du composant principal\n   */\n  @Input() map!: L.Map;\n\n  /**\n   * Liste des marqueurs Leaflet de la carte (1 marqueur par ville)\n   */\n  @Input() markersArray!: L.Marker[];\n\n  /**\n   * Marqueur de la ville de départ de la cohorte\n   */\n  cohorteMarker: L.Marker | undefined = undefined;\n\n  /**\n   * Variable contenant la cohorte choisie dans le formulaire\n   */\n  cohorte: Cohorte = {\n    nbPatients: 0,\n    city: \"\",\n    types: []\n  };\n\n  /**\n   * Variable contenant le type de tube choisi dans le formulaire\n   */\n  type: Type = {\n    name: \"\",\n    tubes: []\n  }\n\n  /**\n   * Variable contenant le tube choisi dans le formulaire\n   */\n  tube: Tube = {\n    number: 0,\n    volume: 0,\n    arcs: []\n  }\n\n  /**\n   * Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n   */\n  solution: Solution = this.solutionService.getSolution();\n  \n  /**\n   * Constructeur du composant\n   * @param solutionService Service permettant de créer l'objet Solution\n   * @param arcService Service permettant de créér les arcs\n   */\n  constructor(private solutionService:SolutionService, private arcService:ArcService){\n    //this.solution = solutionService.solution;\n  }\n\n  /**\n   * Gère la sélection d'une nouvelle cohorte dans le formulaire\n   * @param e Contient l'ancienne cohorte et la nouvelle choisie\n   */\n  cohorteChange(e: MatSelectChange){\n    var city:string = e.value.city;\n    for (const marker of this.markersArray){\n      if(marker.options.alt == city){\n        if(this.cohorteMarker == undefined){\n          this.cohorteMarker = marker;\n          this.cohorteMarker.setIcon(iconViolet);\n        }\n        else{\n          this.cohorteMarker.setIcon(iconDefault); // Reset the previous marker icon\n          this.cohorteMarker = marker;\n          this.cohorteMarker.setIcon(iconViolet); // Change the current marker\n        }\n        \n      }\n    }\n    this.arcService.setCohorteCity(city);\n    this.type = {\n      name: \"\",\n      tubes: []\n    }\n    this.typeChange();\n  }\n\n  /**\n   * Gère la sélection d'un nouveau type de tube dans le formulaire\n   */\n  typeChange(){\n    this.tube = {\n      number: 0,\n      volume: 0,\n      arcs: []\n    }\n    this.tubeChange();\n  }\n\n  /**\n   * Gère la sélection d'un nouveau tube dans le formulaire\n   */\n  tubeChange(){\n    this.removeArcs();\n    this.drawPolylines(this.map, this.tube.arcs)\n    this.arcService.setPolylineArray(this.tube.arcs);\n  }\n\n  /**\n   * Efface tous les arcs créés\n   */\n  removeArcs(){\n    this.map.eachLayer((layer:any) =>{\n      if (layer instanceof L.Polyline) {\n        this.map.removeLayer(layer);\n      }\n    });\n  }\n\n  /**\n   * Dessine les arcs en entrée sur la carte\n   * @param map La carte sur laquelle les arcs doivent être ajoutés\n   * @param\n   */\n  private drawPolylines(map:L.Map, arcs: Arc[]){\n    for (const arc of arcs){\n      arc.polyline.bindTooltip(`Quantité : ${ arc.quantity }`);\n      arc.polyline.addTo(map);\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    Cohorte\n    \n      @for (cohorte of solution.cohortes; track cohorte) {\n        {{cohorte.city}}\n      }\n    \n  \n  \n    Type de tube\n    \n      @for (type of cohorte.types; track type) {\n        {{type.name}}\n      }\n    \n  \n  \n    Tube(s) n°\n    \n      @for (tube of type.tubes; track tube) {\n        {{tube.number}}\n      }\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Cohorte          @for (cohorte of solution.cohortes; track cohorte) {        {{cohorte.city}}      }            Type de tube          @for (type of cohorte.types; track type) {        {{type.name}}      }            Tube(s) n°          @for (tube of type.tubes; track tube) {        {{tube.number}}      }      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FormCohorteComponent', 'selector': 'app-form-cohorte'},{'name': 'TableArcComponent', 'selector': 'app-table-arc'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FormCohorteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Solution.html":{"url":"interfaces/Solution.html","title":"interface - Solution","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Solution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la solution\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cities\n                                        \n                                \n                                \n                                        \n                                            cohortes\n                                        \n                                \n                                \n                                        \n                                            demande\n                                        \n                                \n                                \n                                        \n                                            types\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cities:         City[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         City[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tableau des villes de la solution\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cohortes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cohortes:         Cohorte[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cohorte[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cohortes de la solution\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        demande\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        demande:     Map>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Map>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Demande de chaque type de tube pour chaque ville\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        types:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Types de tube de la solution\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SolutionService.html":{"url":"injectables/SolutionService.html","title":"injectable - SolutionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SolutionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/solution.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service gérant la construction de la solution\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                citiesPosition\n                            \n                            \n                                    Private\n                                instanceSolutionUrl\n                            \n                            \n                                    Private\n                                instanceUrl\n                            \n                            \n                                    Private\n                                mapDataUrl\n                            \n                            \n                                    Private\n                                solution\n                            \n                            \n                                    Private\n                                types\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                drawCities\n                            \n                            \n                                    Private\n                                findCityNameById\n                            \n                            \n                                    Public\n                                getCitiesPosition\n                            \n                            \n                                    Private\n                                getInstance\n                            \n                            \n                                    Private\n                                getInstanceSolution\n                            \n                            \n                                    Private\n                                getMapData\n                            \n                            \n                                    Public\n                                getSolution\n                            \n                            \n                                    Private\n                                parseCities\n                            \n                            \n                                    Private\n                                parseCitiesPosition\n                            \n                            \n                                    Private\n                                parseRepartitionTube\n                            \n                            \n                                    Private\n                                parseSolution\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/solution.service.ts:44\n                            \n                        \n\n                \n                    \n                            Constructeur du service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Client HTTP permettant de faire les requêtes pour récupérer les données via les fichiers txt\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        drawCities\n                        \n                    \n                \n            \n            \n                \n                        \n                    drawCities(map: L.Map, cities: City[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Ajoute les marqueurs associés à chaque ville sur la carte Leaflet\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                map\n                                            \n                                                        L.Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Carte sur laquelle ajouter les marqueurs\n\n                                            \n                                        \n                                        \n                                                cities\n                                            \n                                                            City[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Tableau des villes à ajouter\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     L.Marker[]\n\n                        \n                            \n                                La liste des marqueurs créés\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findCityNameById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCityNameById(cities: City[], id: Number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:283\n                        \n                    \n\n\n            \n                \n                        Renvoie la ville associée à l'id donné en paramètre\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cities\n                                            \n                                                            City[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Le tableau des villes à chercher\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            Number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Le numéro de la ville à trouver\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Le nom de la ville correspondant à l'id donné en paramètre, sinon une chaîne vide si aucune ville ne correspond\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCitiesPosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCitiesPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Renvoie la position des marqueurs de chaque ville\n\n\n                        \n                            Returns :     Map\n\n                        \n                            \n                                Un tableau contenant la position des marqueurs associés à chaque ville\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstance()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Renvoie l'instance texte en entrée du modèle\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                L'instance texte en entrée du modèle sous la forme d'un Observable\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getInstanceSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstanceSolution()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Renvoie la solution texte proposée par le modèle\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                La solution texte proposée par le modèle sous la forme d'un Observable\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMapData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMapData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Renvoie les données de la carte\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Les données de la carte sous la forme d'un Observable\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSolution()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Renvoie la solution proposée par le modèle\n\n\n                        \n                            Returns :         Solution\n\n                        \n                            \n                                La solution proposée par le modèle sous la forme d'un objet Solution\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseCities\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseCities()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Initialise le tableau des villes grâce aux données de la carte\n\n\n                        \n                            Returns :         City[]\n\n                        \n                            \n                                La liste des villes\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseCitiesPosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseCitiesPosition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Initialise la position des marqueurs associés à chaque ville depuis les données de la carte\n\n\n                        \n                            Returns :     Map\n\n                        \n                            \n                                La liste des positions des marqueurs associés à chaque ville\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseRepartitionTube\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseRepartitionTube()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:259\n                        \n                    \n\n\n            \n                \n                        Retourne l'indice des villes associée à chaque tube proposée par le modèle (répartition par tubes)\n\n\n                        \n                            Returns :     [][]\n\n                        \n                            \n                                La liste des arcs\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseSolution()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/solution.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Initialise la solution\n\n\n                        \n                            Returns :         Solution\n\n                        \n                            \n                                La solution proposée par le mèdle sous la forme d'un objet Solution\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        citiesPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:39\n                        \n                    \n\n            \n                \n                    Tableau contenant la position des marqueurs associés à chaque ville\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        instanceSolutionUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"assets/solution_data/solution_instance.txt\"\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:28\n                        \n                    \n\n            \n                \n                    URL de la solution proposée par le modèle\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        instanceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"assets/solution_data/instance.txt\"\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:23\n                        \n                    \n\n            \n                \n                    URL de l'instance d'entrée du modèle\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapDataUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"assets/map_data/map.geojson\"\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:18\n                        \n                    \n\n            \n                \n                    URL des données de la carte\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        solution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Solution\n\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:44\n                        \n                    \n\n            \n                \n                    Contient la solution proposée par le modèle sous la forme d'un objet Solution\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"LCR\",\"SER\",\"PLA\"]\n                    \n                \n                    \n                        \n                                Defined in src/app/solution.service.ts:34\n                        \n                    \n\n            \n                \n                    Liste des types de tube différents\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport L, { LatLngExpression } from 'leaflet';\nimport 'leaflet-arrowheads';\nimport { Solution, City, Cohorte, Arc } from './include/interfaces';\n\n/**\n * Service gérant la construction de la solution\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolutionService {\n  // TODO: Les données de la carte (villes ect...) sont créées manuellement, peut-être pouvoir choisir la liste des villes ?\n  /**\n   * URL des données de la carte\n   */\n  private mapDataUrl:string = \"assets/map_data/map.geojson\";\n\n  /**\n   * URL de l'instance d'entrée du modèle\n   */\n  private instanceUrl:string = \"assets/solution_data/instance.txt\";\n\n  /**\n   * URL de la solution proposée par le modèle\n   */\n  private instanceSolutionUrl:string = \"assets/solution_data/solution_instance.txt\";\n\n  // TODO: Les types de tubes sont créées manuellement, peut-être pouvoir choisir la liste des types ?\n  /**\n   * Liste des types de tube différents\n   */\n  private types:string[] = [\"LCR\",\"SER\",\"PLA\"];\n\n  /**\n   * Tableau contenant la position des marqueurs associés à chaque ville\n   */\n  private citiesPosition: Map;\n\n  /**\n   * Contient la solution proposée par le modèle sous la forme d'un objet Solution\n   */\n  private solution: Solution;\n\n  /**\n   * Constructeur du service\n   * @param http Client HTTP permettant de faire les requêtes pour récupérer les données via les fichiers txt\n   */\n  constructor(protected http:HttpClient) {\n    this.citiesPosition = this.parseCitiesPosition();\n    this.solution = this.parseSolution();\n  }\n\n  /**\n   * Renvoie les données de la carte\n   * @returns Les données de la carte sous la forme d'un Observable\n   */\n  private getMapData(){\n    return this.http.get(this.mapDataUrl);\n  }\n\n  /** \n   * Renvoie l'instance texte en entrée du modèle\n   * @returns L'instance texte en entrée du modèle sous la forme d'un Observable\n   */\n  private getInstance(){\n    return this.http.get(this.instanceUrl, { responseType: 'text'});\n  }\n\n  /**\n   * Renvoie la solution texte proposée par le modèle\n   * @returns La solution texte proposée par le modèle sous la forme d'un Observable\n   */\n  private getInstanceSolution(){\n    return this.http.get(this.instanceSolutionUrl, { responseType: 'text'});\n  }\n\n  /**\n   * Renvoie la position des marqueurs de chaque ville\n   * @returns Un tableau contenant la position des marqueurs associés à chaque ville\n   */\n  public getCitiesPosition(): Map {\n    return this.citiesPosition;\n  }\n\n  /**\n   * Renvoie la solution proposée par le modèle\n   * @returns La solution proposée par le modèle sous la forme d'un objet Solution\n   */\n  public getSolution(): Solution{\n    return this.solution;\n  }\n\n  /**\n   * Ajoute les marqueurs associés à chaque ville sur la carte Leaflet\n   * @param map Carte sur laquelle ajouter les marqueurs\n   * @param cities Tableau des villes à ajouter\n   * @returns La liste des marqueurs créés\n   */\n  public drawCities(map: L.Map, cities:City[]): L.Marker[]{ \n    var markersArray: L.Marker[] = [];\n    setTimeout(() => {\n      for (const city of cities) {\n        // Ugly line to work around \"LatLngExpression is not assignable to number | any | undefined...\"\n        let latlngs:LatLngExpression = [this.citiesPosition.get(city.name)![0], this.citiesPosition.get(city.name)![1]];\n\n        const marker = L.marker(latlngs, {alt: city.name});\n\n        // Ajout du marqueur à la cart\n        marker.addTo(map);\n\n        markersArray.push(marker);\n      }\n    }, 500);\n    \n    return markersArray;\n  }\n\n  /**\n   * Initialise le tableau des villes grâce aux données de la carte\n   * @returns La liste des villes\n   */\n  private parseCities(): City[]{\n    var cities:City[] = [];\n    setTimeout(() => {\n      this.getMapData().subscribe((data:any) => {\n        for (const city of data.features) {\n          const name = city.properties.name;\n          const id = city.id; \n          var cityToAdd: City = {\n            name: name,\n            id: id,\n            cohorte: false\n          }\n          cities.push(cityToAdd);\n        }\n      });\n    }, 200);\n    \n    return cities;\n  }\n\n  /**\n   * Initialise la position des marqueurs associés à chaque ville depuis les données de la carte\n   * @returns La liste des positions des marqueurs associés à chaque ville\n   */\n  private parseCitiesPosition(): Map{\n    let citiesPosition: Map = new Map();\n    setTimeout((() =>{\n      this.getMapData().subscribe((cities:any) => {\n        for (const city of cities.features) {\n          const lat = city.geometry.coordinates[0];\n          const lon = city.geometry.coordinates[1];\n          const name = city.properties.name; \n          \n          citiesPosition.set(name, [lat,lon]);\n        }\n      });\n    }),100);\n    \n    return citiesPosition;\n  }\n\n  /**\n   * Initialise la solution\n   * @returns La solution proposée par le mèdle sous la forme d'un objet Solution\n   */\n  private parseSolution(): Solution{\n    var solution:Solution = {\n      cities: this.parseCities(),\n      // TODO: Adapter en fonction du nombre de types donné par l'instance du modèle\n      types: this.types.slice(0,2),\n      cohortes: [],\n      demande: new Map>()\n    }\n\n    setTimeout(() =>{\n      this.getInstance().subscribe(data => {\n        var textLines = data.split('\\n');\n        var nbVilles = Number(textLines[0]);\n        var nbCohortes = Number(textLines[1]);\n        var cohorteVilleline = textLines[2].split('\\t');\n        var cohorteNbPatientsline = textLines[3].split('\\t');\n        for (var i = 0; i ());\n          var demandeLine = textLines[6+nbTypes*nbCohortes + i].split('\\t');\n          for(var j = 0; j {\n          for(var i = 0; i {\n      this.getInstanceSolution().subscribe(data =>{\n        var textLines = data.split('\\n');\n        for(var i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TableArcComponent.html":{"url":"components/TableArcComponent.html","title":"component - TableArcComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TableArcComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/table-arc/table-arc.component.ts\n\n\n\n    \n        Description\n    \n    \n        TableArcComponent gère la modification des arcs pour chaque tube\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-table-arc\n            \n\n            \n                Standalone\n                true\n            \n\n            \n                imports\n                \n                            MatFormFieldModule\n                            MatSelectModule\n                            MatInputModule\n                            FormsModule\n                            MatTableModule\n                            MatPaginator\n                            NgIf\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./table-arc.component.html\n            \n\n\n\n            \n                styleUrl\n                ./table-arc.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                newSolution\n                            \n                            \n                                pageIndex\n                            \n                            \n                                pageSize\n                            \n                            \n                                    \n                                paginator\n                            \n                            \n                                polylineArray\n                            \n                            \n                                selectedDestination\n                            \n                            \n                                selectedOrigin\n                            \n                            \n                                showSaveButton\n                            \n                            \n                                totalRecords\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                arcChange\n                            \n                            \n                                checkSolution\n                            \n                            \n                                handleSaveErrors\n                            \n                            \n                                mouseOutArc\n                            \n                            \n                                mouseOverArc\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(arcService: ArcService, solutionService: SolutionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/table-arc/table-arc.component.ts:84\n                            \n                        \n\n                \n                    \n                            Constructeur du composant\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        arcService\n                                                  \n                                                        \n                                                                        ArcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service permettant de créér les arcs\n\n                                                        \n                                                \n                                                \n                                                        solutionService\n                                                  \n                                                        \n                                                                        SolutionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service permettant de créer l'objet Solution\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        arcChange\n                        \n                    \n                \n            \n            \n                \narcChange(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Modifie l'arc dessiné sur la carte avec les valeurs sélectionnées dans le tableau d'arcs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    : Indice de l'arc à modifier\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkSolution\n                        \n                    \n                \n            \n            \n                \ncheckSolution()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:133\n                        \n                    \n\n\n            \n                \n                        Vérifie si la solution modifiée par l'utilisateur reste faisable (i.e. chaque ville est bien desservie par une seule autre ville)\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleSaveErrors\n                        \n                    \n                \n            \n            \n                \nhandleSaveErrors(error: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:169\n                        \n                    \n\n\n            \n                \n                        Affiche un message d'erreur quand l'utilisateur essaie de sauvegarder une solution infaisable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Message d'erreur à afficher\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mouseOutArc\n                        \n                    \n                \n            \n            \n                \nmouseOutArc(data: Arc)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Réinitialise le style d'un arc quand on enlève la souris de la ligne associée dans le tableau d'arcs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Arc\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Arc à réinitialiser\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mouseOverArc\n                        \n                    \n                \n            \n            \n                \nmouseOverArc(data: Arc)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Modifie le style d'un arc quand on passe la souris sur la ligne associée dans le tableau d'arcs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Arc\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Arc à modifier\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/table-arc/table-arc.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Initialise toutes les valeurs du composant\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cities\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:49\n                        \n                    \n\n            \n                \n                    Tableau contenant le nom des villes attribuées à un tube\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatTableDataSource\n\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:34\n                        \n                    \n\n            \n                \n                    Variable contenant les données des arcs pour remplir l'objet MatTable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : ['number', 'origin', 'destination']\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:29\n                        \n                    \n\n            \n                \n                    Variable pour les titres des colonnes de l'objet MatTable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newSolution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Solution\n\n                    \n                \n                \n                    \n                        Default value : this.solutionService.getSolution()\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:39\n                        \n                    \n\n            \n                \n                    Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:79\n                        \n                    \n\n            \n                \n                    Numéro de la page du tableau d'arcs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:74\n                        \n                    \n\n            \n                \n                    Nombre d'arcs par page du tableau d'arcs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paginator\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatPaginator\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('paginator')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:64\n                        \n                    \n\n            \n                \n                    Le paginateur du composant\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        polylineArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Arc[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:44\n                        \n                    \n\n            \n                \n                    Tableau d'Arc contenant la liste des arcs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedDestination\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:59\n                        \n                    \n\n            \n                \n                    Tableau contenant les villes d'arrivée des arcs d'un tube\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedOrigin\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:54\n                        \n                    \n\n            \n                \n                    Tableau contenant les villes de départ des arcs d'un tube\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSaveButton\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:84\n                        \n                    \n\n            \n                \n                    Booléen pour contrôler l'affichage du bouton Sauvegarder\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalRecords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/table-arc/table-arc.component.ts:69\n                        \n                    \n\n            \n                \n                    Taille du tableau d'arcs\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ArcService } from '../arc.service';\nimport { SolutionService } from '../solution.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { NgIf } from '@angular/common';\nimport { LatLngExpression } from 'leaflet';\nimport { Arc, Solution } from '../include/interfaces';\n\n/**\n * TableArcComponent gère la modification des arcs pour chaque tube\n */\n@Component({\n  selector: 'app-table-arc',\n  standalone: true,\n  imports: [MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatTableModule, MatPaginator, NgIf,  MatButtonModule],\n  templateUrl: './table-arc.component.html',\n  styleUrl: './table-arc.component.scss'\n})\nexport class TableArcComponent implements OnInit{\n  /**\n   * Variable pour les titres des colonnes de l'objet MatTable\n   */\n  displayedColumns: string[] = ['number', 'origin', 'destination'];\n\n  /**\n   * Variable contenant les données des arcs pour remplir l'objet MatTable\n   */\n  dataSource!: MatTableDataSource;\n\n  /**\n   * Solution provenant de SolutionService (Initialisée en amont depuis le service même)\n   */\n  newSolution: Solution = this.solutionService.getSolution();\n\n  /**\n   * Tableau d'Arc contenant la liste des arcs \n   */\n  polylineArray: Arc[] = [];\n\n  /**\n   * Tableau contenant le nom des villes attribuées à un tube\n   */\n  cities: string[] = [];\n\n  /**\n   * Tableau contenant les villes de départ des arcs d'un tube\n   */\n  selectedOrigin: string[] = [];\n\n  /**\n   * Tableau contenant les villes d'arrivée des arcs d'un tube\n   */\n  selectedDestination: string[] = [];\n\n  /**\n   * Le paginateur du composant\n   */\n  @ViewChild('paginator') paginator!: MatPaginator;\n\n  /**\n   * Taille du tableau d'arcs\n   */\n  totalRecords = 0;\n\n  /**\n   * Nombre d'arcs par page du tableau d'arcs\n   */\n  pageSize = 10;\n\n  /**\n   * Numéro de la page du tableau d'arcs\n   */\n  pageIndex = 0;\n\n  /**\n   * Booléen pour contrôler l'affichage du bouton Sauvegarder\n   */\n  showSaveButton = false;\n\n  /**\n   * Constructeur du composant\n   * @param solutionService Service permettant de créer l'objet Solution\n   * @param arcService Service permettant de créér les arcs\n   */\n  constructor(private arcService:ArcService, private solutionService:SolutionService){\n  }\n\n  /**\n   * Modifie le style d'un arc quand on passe la souris sur la ligne associée dans le tableau d'arcs\n   * @param data Arc à modifier\n   */\n  mouseOverArc(data: Arc){\n    data.polyline.setStyle({\n      weight: 6,\n      opacity: 1\n    })\n  }\n\n  /**\n   * Réinitialise le style d'un arc quand on enlève la souris de la ligne associée dans le tableau d'arcs\n   * @param data Arc à réinitialiser\n   */\n  mouseOutArc(data: Arc){\n    data.polyline.setStyle({\n      weight: 5,\n      opacity: 0.7\n    })\n  }\n\n  /**\n   * Modifie l'arc dessiné sur la carte avec les valeurs sélectionnées dans le tableau d'arcs\n   * @param index: Indice de l'arc à modifier\n   */\n  arcChange(index: number){\n    var newOrigin:string = this.selectedOrigin[index];\n    var newDestination:string = this.selectedDestination[index];\n    var citiesPosition = this.solutionService.getCitiesPosition();\n    var newOriginCoord: LatLngExpression = [citiesPosition.get(newOrigin)![0], citiesPosition.get(newOrigin)![1]];\n    var newDestinationCoord: LatLngExpression = [citiesPosition.get(newDestination)![0], citiesPosition.get(newDestination)![1]];\n    this.polylineArray[index].polyline.setLatLngs([newOriginCoord, newDestinationCoord]);\n  }\n\n  // TODO : La fonction marche mais elle ne fait que afficher le résultat dans la console\n  /**\n   * Vérifie si la solution modifiée par l'utilisateur reste faisable (i.e. chaque ville est bien desservie par une seule autre ville)\n   */\n  checkSolution(){\n    var cohorteCity = this.arcService.getCohorteCity();\n    var error = \"Ok !\"\n    if (this.selectedDestination.includes(cohorteCity)){\n      error = \"La ville cohorte ne peut pas être dans les villes d'arrivée\";\n      this.handleSaveErrors(error);\n    }\n    var nbOccurences = new Map();\n    this.cities.forEach(city => {\n      nbOccurences.set(city, 0);\n    });\n    this.selectedDestination.forEach(city => {\n      nbOccurences.set(city, nbOccurences.get(city)! + 1);\n    });\n    for (const city of this.cities){\n      if(city != cohorteCity && nbOccurences.get(city) != 1){\n        error = city + \" ne doit apparaître qu'une seule et unique fois !\"\n        this.handleSaveErrors(error);\n      }\n    }\n    for (var id = 0; id  {\n        this.cities = [];\n        this.selectedOrigin = [];\n        this.selectedDestination = [];\n        var cityCohorte = this.arcService.getCohorteCity();\n        var indexToRemove = -1;\n        for (const line of polylineArray){\n          if (line.destination == cityCohorte){\n            /* TODO : Je sais pas trop quoi faire de la ligne Cohorte à Cohorte, \n            pour l'instant je l'enlève mais c'est pas forcément le meilleur */\n            indexToRemove = line.index; // remove the line cohorte -> cohorte  \n          }\n          else{\n            this.cities.indexOf(line.origin) === -1 ? this.cities.push(line.origin): null; // Push if not already present, else nothing\n            this.cities.indexOf(line.destination) === -1 ? this.cities.push(line.destination): null; // Push if not already present, else nothing\n\n            this.selectedOrigin.push(line.origin);\n            this.selectedDestination.push(line.destination); // Fill the arrays to not get an error from the cells in mat-table\n          }\n        }\n        if (indexToRemove != -1){\n          // TODO : Il faudrait aussi update les line.index après une suppression\n          polylineArray.splice(indexToRemove,1);\n\n        }\n        this.polylineArray = polylineArray;\n        this.dataSource = new MatTableDataSource(polylineArray);\n        this.totalRecords = this.polylineArray.length;\n        this.dataSource.paginator = this.paginator;\n\n        this.showSaveButton = (this.polylineArray.length > 0);\n\n      }\n    );\n  }\n}\n    \n\n    \n        \n  \n  \n    N°\n    {{arc.index + 1}}\n  \n\n  \n  \n    Départ\n    \n      \n        @for (city of cities; track city) {\n          {{city}} \n          {{city}}\n        }\n      \n    \n  \n\n  \n  \n    Arrivée\n    \n      \n        @for (city of cities; track city) {\n          {{city}} \n          {{city}}\n        }\n      \n    \n  \n\n  \n  \n\n\n\n    #paginator\n    [pageSize]=\"pageSize\"\n    [pageIndex]=\"pageIndex\"\n    [length]=\"totalRecords\"\n    [hidePageSize]=\"true\"\n\n\n  Sauvegarder\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        N°    {{arc.index + 1}}          Départ                  @for (city of cities; track city) {          {{city}}           {{city}}        }                    Arrivée                  @for (city of cities; track city) {          {{city}}           {{city}}        }                    #paginator    [pageSize]=\"pageSize\"    [pageIndex]=\"pageIndex\"    [length]=\"totalRecords\"    [hidePageSize]=\"true\"  Sauvegarder'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FormCohorteComponent', 'selector': 'app-form-cohorte'},{'name': 'TableArcComponent', 'selector': 'app-table-arc'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TableArcComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tube.html":{"url":"interfaces/Tube.html","title":"interface - Tube","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tube\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour un tube / échantillon sanguin / prélèvement\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            arcs\n                                        \n                                \n                                \n                                        \n                                            number\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arcs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arcs:         Arc[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Arc[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Liste d'arcs associés au tube\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        number\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        number:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Numéro du tube\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Volume / quantité du tube\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Type.html":{"url":"interfaces/Type.html","title":"interface - Type","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Type\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/include/interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour un type de tube\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            tubes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nom du type de tube\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tubes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tubes:         Tube[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Tube[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tableau de Tube associés au type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Cohorte {\n    /**\n     * Nombre de patients de la cohorte\n     */\n    nbPatients: number | undefined,\n\n    /**\n     * Ville de départ de la cohorte\n     */\n    city: string,\n\n    /**\n     * Types de tube de la cohorte\n     */\n    types: Type[]\n}\n\n/**\n * Interface pour un type de tube\n */\nexport interface Type {\n    /**\n     * Nom du type de tube\n     */\n    name: string,\n\n    /**\n     * Tableau de Tube associés au type\n     */\n    tubes: Tube[]\n}\n\n/**\n * Interface pour un tube / échantillon sanguin / prélèvement\n */\nexport interface Tube {\n    /**\n     * Numéro du tube\n     */\n    number: number,\n\n    /**\n     * Volume / quantité du tube\n     */\n    volume: number,\n\n    // TODO: Faire une interface Envoi explicite\n    /**\n     * Liste d'arcs associés au tube\n     */\n    arcs: Arc[]\n}\n\n/**\n * Interface pour un arc\n */\nexport interface Arc {\n    /**\n     * Objet Polyline de Leaflet, i.e. l'arc dessiné sur la carte\n     */\n    polyline: L.Polyline,\n\n    /**\n     * Nom de la ville de départ \n     */\n    origin: string,\n\n    /**\n     * Nom de la ville d'arrivée \n     */\n    destination: string,\n\n    /**\n     * Numéro de l'arc\n     */\n    index: number,\n\n    /**\n     * Flux envoyé de la ville origin à la ville destination\n     */\n    quantity: number\n}\n\n/**\n * Interface pour une ville\n */\nexport interface City {\n    /**\n     * Nom de la ville\n     */\n    name: string,\n\n    /**\n     * Indice de la ville\n     */\n    id: number,\n\n    /**\n     * Indique si la ville est une cohorte ou non\n     */\n    cohorte: boolean\n}\n\n/**\n * Interface pour la solution\n */\nexport interface Solution {\n    /**\n     * Tableau des villes de la solution\n     */\n    cities: City[],\n\n    /**\n     * Types de tube de la solution\n     */\n    types: string[],\n\n    /**\n     * Cohortes de la solution\n     */\n    cohortes: Cohorte[],\n\n    /**\n     * Demande de chaque type de tube pour chaque ville\n     */\n    demande: Map>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/arc.service.ts\n            \n            injectable\n            ArcService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/form-cohorte/form-cohorte.component.ts\n            \n            component\n            FormCohorteComponent\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            Arc\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            City\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            Cohorte\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            Solution\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            Tube\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/include/interfaces.ts\n            \n            interface\n            Type\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/include/leaflet-icons.ts\n            \n            variable\n            iconDefault\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/include/leaflet-icons.ts\n            \n            variable\n            iconUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/include/leaflet-icons.ts\n            \n            variable\n            iconViolet\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/include/leaflet-icons.ts\n            \n            variable\n            iconVioletUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/include/leaflet-icons.ts\n            \n            variable\n            shadowUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/solution.service.ts\n            \n            injectable\n            SolutionService\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/app/table-arc/table-arc.component.ts\n            \n            component\n            TableArcComponent\n            \n                100 %\n                (20/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.0\n        \n            @angular/cdk : ^17.3.0\n        \n            @angular/common : ^17.3.0\n        \n            @angular/compiler : ^17.3.0\n        \n            @angular/core : ^17.3.0\n        \n            @angular/forms : ^17.3.0\n        \n            @angular/material : ^17.3.0\n        \n            @angular/platform-browser : ^17.3.0\n        \n            @angular/platform-browser-dynamic : ^17.3.0\n        \n            @angular/router : ^17.3.0\n        \n            @asymmetrik/ngx-leaflet : ^17.0.0\n        \n            @ng-bootstrap/ng-bootstrap : ^16.0.0\n        \n            @popperjs/core : ^2.11.8\n        \n            bootstrap : ^5.3.2\n        \n            bootstrap-icons : ^1.11.3\n        \n            leaflet : ^1.9.4\n        \n            leaflet-arrowheads : ^1.4.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPRD  Optimisation des déplacements d’échantillons médicaux dans le cadre de la Sclérose Latérale Amyotrophique (SLA ou Maladie de Charcot)\nCe projet correspond à la deuxième partie de mon PRD, à savoir un outil de visualisation des solutions proposées par le modèle,\navec pour objectif de pouvoir modifier à sa guise les flux d'échantillons et évaluer l'impact de ces décisions sur la solution optimale.\nTechnologies utilisées\nLe projet est codé en TypeScript avec le framework Angular, ainsi que la bibliothèque Leaflet pour la gestion de la carte interactive.\nInitialisation du projet\nAprès avoir pull le projet depuis le repository Git (https://github.com/BethencourtFlorian/PRD),ouvrez un terminal et déplacez vous dans le dossier \"PRD\".\nD'ici, lancez la commande npm install pour installer toutes les dépendances du projet.  \nLa commande ng serve ouvrira un serveur de développement à l'adresse http://localhost:4200.Vous pouvez également lancer ng serve --open pour ouvrir l'onglet automatiquement.  \nDocumentation\nL'entièreté du code est documentée, et le projet utilise l'outil CompoDoc pour générer la documentationsous la forme d'un site web.La commande npm run compodoc permet de regénérer la documentation et ouvre un serveur à l'adresse http://127.0.0.1:8080/.\nVous pouvez lancer npm run compodoc generate et npm run compodoc serve pour respectivement regénérer la documention et ouvrir le serveur.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            iconDefault   (src/.../leaflet-icons.ts)\n                        \n                        \n                            iconUrl   (src/.../leaflet-icons.ts)\n                        \n                        \n                            iconViolet   (src/.../leaflet-icons.ts)\n                        \n                        \n                            iconVioletUrl   (src/.../leaflet-icons.ts)\n                        \n                        \n                            shadowUrl   (src/.../leaflet-icons.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/include/leaflet-icons.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iconDefault\n                        \n                    \n                \n            \n                \n                    \n                        Default value : L.icon({\n    iconUrl,\n    shadowUrl,\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34],\n    tooltipAnchor: [16, -28],\n    shadowSize: [41, 41]\n})\n                    \n                \n\n            \n                \n                    Icône par défaut des marqueurs Leaflet\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iconUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'assets/images/marker-icon.png'\n                    \n                \n\n            \n                \n                    URL de l'icône par défaut\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iconViolet\n                        \n                    \n                \n            \n                \n                    \n                        Default value : L.icon({\niconUrl : iconVioletUrl,\nshadowUrl,\niconSize: [25, 41],\niconAnchor: [12, 41],\npopupAnchor: [1, -34],\ntooltipAnchor: [16, -28],\nshadowSize: [41, 41]\n})\n                    \n                \n\n            \n                \n                    Icône pour le marqueur de la cohorte\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iconVioletUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'assets/images/marker-icon-violet.png'\n                    \n                \n\n            \n                \n                    URL de l'icône violette\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shadowUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'assets/images/marker-shadow.png'\n                    \n                \n\n            \n                \n                    URL de l'ombre de l'icône\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
